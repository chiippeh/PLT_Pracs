
   1 import library.*;
   2 
   3 COMPILER RE $CN
   4 /* Regular expression grammar - determine underlying alphabet 
   5   and where terminals are used (Java version)
   6   P.D. Terry, Rhodes University; modified KL Bradshaw 2023 
   7   Extended (August 2023) by:
   8   Wynne Edwards g21e2079, Mila Davies g21d6937, Manu Jourdan g21j5408 */
   9 
  10 public static OutFile output;                                                   /* ~~~ Changed ~~~ */                                        
  11 public static int lineCounter = 1; // counts each new regex line               /* ~~~ Changed ~~~ */
  12 
  13 CHARACTERS
  14   lf       = CHR(10) .
  15   control  = CHR(1) .. CHR(31) .
  16   noquote1 = ANY - control - "'" - CHR(0) .
  17   noquote2 = ANY - control - '"' - CHR(0) .
  18   meta     = "()*|.;[]-?+" .
  19   simple   = ANY - control - "'" - '"' - meta - CHR(0) .
  20 
  21 TOKENS
  22   atomic  = simple .
  23   escaped = "'" noquote1 "'" | '"' noquote2 '"' .
  24   EOL     = lf .
  25 
  26 IGNORE  control - lf
  27 
  28 PRODUCTIONS
  29   RE                                                                        /* ~~~ Changed ~~~ */
  30   = { Expression (. lineCounter++; .) 
  31       EOL 
  32     } 
  33     (. Table.printTable(output); .)
  34     (. Table.printAlphabet(output, 1); .)
  35     (. Table.printAlphabet(output, 2); .)
  36     (. Table.printAlphabet(output, 3); .)
  37     (. System.out.println("\nSee RE.out file for results :)\n"); .)
  38     EOF .
  39 
  40   Expression = Term { "|" Term } .
  41   Term       = Factor { [ "." ] Factor } .
  42   Factor     = Element [ "*" | "?" | "+" ] .
  43   Element    = Atom | Range | "(" Expression ")" .
  44   Range      = "[" OneRange { OneRange } "]" .
  45 
  46   OneRange (. char atomVal1 = 'x'; char atomVal2 = 'x'; .)                   /* ~~~ Changed ~~~ */
  47   = Atom (. if (token.val.length() > 1) { //if escaped
  48               atomVal1 = token.val.charAt(1);
  49             } else {
  50               atomVal1 = token.val.charAt(0); 
  51             } .)
  52     [ "-" 
  53     Atom (. if (token.val.length() > 1) { //if escaped
  54               atomVal2 = token.val.charAt(1);
  55             } else {
  56               atomVal2 = token.val.charAt(0); 
  57             } .)
  58     ] (. for (int i = (atomVal1)+1; i < atomVal2; i++) { //for each char in range, add to table
  59              Table.addRef((char) i, lineCounter);
  60          }.) 
  61     .
  62 
  63   Atom                                                                       /* ~~~ Changed ~~~ */
  64   = (atomic | escaped) 
  65   (. if (token.val.length() > 1) { //if escaped
  66         char c = token.val.charAt(1);
  67         Table.addRef((char) c, lineCounter);
  68       } else { //if atomic
  69         char c = token.val.charAt(0);
  70         Table.addRef(c, lineCounter);
  71       } .)
  72   .
  73 
  74 END RE.

0 errors detected
