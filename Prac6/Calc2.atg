import library.*;

COMPILER Calc2  $CN
/* Simple four function calculator with 26 memory cells
   P.D. Terry, Rhodes University; extended KL Bradshaw, 2023 
   Extended by:
   Wynne Edwards g21e2079, Mila Davies g21d6937, Manu Jourdan g21j5408 */

  static Double[] mem = new Double[26];                    /* Change double to Double to accomodate for null values */

CHARACTERS
  digit      = "0123456789" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" .

TOKENS
  Number     = digit { digit } [ "." { digit } ] .
  Variable   = letter .

IGNORE CHR(0) .. CHR(31)

PRODUCTIONS
  Calc2                              (. int index = 0; Double value = null; .)      /* ~~~~~~~ Changed ~~~~~~~ */
  = { Variable                       (. index = token.val.charAt(0) - 'A'; .)  
      "=" 
      Expression<out value>          (. mem[index] = value;
                                        if (value != null) IO.writeLine(value); .)  /* ~~~~~~~ Changed ~~~~~~~ */
      ";"
      | "print" Expression<out value> (. if (value != null) IO.writeLine(value); .)  /* ~~~~~~~ Changed ~~~~~~~ */
      ";"
    } EOF .

  Expression<out Double expVal>      (. Double expVal1 = null; .)                    /* ~~~~~~~ Changed ~~~~~~~ */
  = Term<out expVal>
    {   "+" Term<out expVal1>        (. expVal += expVal1; .)
      | "-" Term<out expVal1>        (. expVal -= expVal1; .)
    } .

  Term<out Double termVal>           (. Double termVal1 = null; .)                   /* ~~~~~~~ Changed ~~~~~~~ */
  = Factor<out termVal>
    {   "*" Factor<out termVal1>     (. termVal *= termVal1; .)
      | "/" Factor<out termVal1>     (. if (termVal1 == 0) {                         /* ~~~~~~~ Changed ~~~~~~~ */
                                          SemError("divide by zero");
                                        } else {
                                          termVal /= termVal1;
                                        } .)
    } .

  Factor<out Double factVal>         (. factVal = null;
                                        Double factVal1 = null; .)                   /* ~~~~~~~ Changed ~~~~~~~ */
  =   Number                         (. try {
                                          factVal = Double.parseDouble(token.val);
                                        } catch (NumberFormatException e) {
                                          SemError("number out of range");
                                        } .)
    | Variable                       (. int index = token.val.charAt(0) - 'A';        /* ~~~~~~~ Changed ~~~~~~~ */
                                      
                                        if (mem[index] == null) {
                                          SemError("variable referenced before assignment");
                                        } else {
                                          factVal = mem[index]; 
                                        } .)
    | "(" Expression<out factVal> ")"
    | "sqrt(" Expression<out factVal> (. factVal = factVal*factVal; .)                /* ~~~~~~~ Changed ~~~~~~~ */
      ")"
    | "max(" Expression<out factVal>                                                  /* ~~~~~~~ Changed ~~~~~~~ */
          {"," Expression<out factVal1>  (. factVal = Math.max(factVal, factVal1); .)
          } ")" 
    .

END Calc2.
