  COMPILER ParvaV2 $CN
  /* Parva level 1 grammar  - Coco/R for Java (EBNF)
     P.D. Terry, Rhodes University, modified by KL Bradshaw, 2023
     Basic Grammar only -- for prac 4 */

  CHARACTERS
    lf         = CHR(10) .
    backslash  = CHR(92) .
    control    = CHR(0) .. CHR(31) .
    letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                 + "abcdefghijklmnopqrstuvwxyz" .
    digit      = "0123456789" .
    stringCh   = ANY - '"' - control - backslash .
    charCh     = ANY - "'" - control - backslash .
    printable  = ANY - control .

  TOKENS
    identifier = letter { letter | digit | "_" } .
    number     = digit { digit } .
    stringLit  = '"' { stringCh | backslash printable } '"' .
    charLit    = "'" ( charCh   | backslash printable ) "'" .

  COMMENTS FROM "//" TO lf
  COMMENTS FROM "/*" TO "*/"
  IGNORE CHR(9) .. CHR(13)

  PRODUCTIONS
    ParvaV2             = "void" identifier "(" ")" Block .
    Block             = "{" { Statement } "}" .
    Statement         =   Block | ";"
                        | VarDeclarations
                        | Assignment | IfStatement | WhileStatement
                        | ReturnStatement | HaltStatement
                        | ReadStatement | WriteStatement 
                        | RepeatStatement | BreakStatement 
                        | ContinueStatement | ForLoopStatment.

    VarDeclarations   = Type OneVar { "," OneVar } ";" .
    OneVar            = identifier [ "=" Expression ] .
    Assignment        = (PreDesignator | Designator) ["=" Expression] ";" .
    PreDesignator     = ("++"|"--") identifier [ "[" Expression "]" ] .
    Designator        = identifier [ ["[" Expression "]"] ("++"|"--") ] .
    IfStatement       = "if" "(" Condition ")" Statement ["else" Statement] .
    WhileStatement    = "while" "(" Condition ")" Statement .
    RepeatStatement   = "repeat" {Statement} "until" "(" Condition ")" ";" .
    ForLoopStatment   = "for" (PythonForLoop | JavaForLoop) Statement .
    PythonForLoop     = identifier "in" "(" Expression { "," Expression } ")" .
    JavaForLoop       = "(" Assignment Condition ";" identifier ("=" Expression | ("++"|"--")) ")" .
    ReturnStatement   = "return" ";" .
    HaltStatement     = "halt" ";" .
    BreakStatement    = "break" ";" .
    ContinueStatement = "continue" ";" .
    ReadStatement     = "read" "(" ReadElement
                                   { "," ReadElement } ")" ";" .
    ReadElement       = stringLit | Designator .
    WriteStatement    = "write" "(" WriteElement
                                    { "," WriteElement } ")" ";" .
    WriteElement      = stringLit | Expression .
    Condition         = Expression .
    Expression        = RelExp [ RelOp RelExp ] .
    RelExp            = [ "+" | "-" ] Term { AddOp Term } .
    Term              = ("new" BasicType "[" Expression "]" | Factor) { MulOp Factor } .

    Factor            =   Designator | Constant
                        | "!" Factor | "(" Expression ")" .

	Constant          =   number | charLit
                        | "true" | "false" | "null" . 
                        
    Type              = BasicType [ "[]" ] .
    BasicType         = "int" | "bool" | "const" .
    AddOp             = "+" | "-" | "||" .
    MulOp             = "*" | "/" | "&&" | "%".
    RelOp             = "==" | "!=" | "<" | "<=" | ">" | ">=" .
  END ParvaV2.
