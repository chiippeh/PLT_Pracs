
   1 import java.util.*;
   2 import library.*;
   3 
   4 COMPILER Parva $NC
   5 /* Parva level 1 grammar  - Coco/R for Java
   6    P.D. Terry, Rhodes University; Modified by KL Bradshaw, 2023
   7    Java operator precedences with short circuit evaluation
   8    Includes character type
   9    No functions; no optimization */
  10 
  11   public static boolean
  12     debug    = false,
  13     listCode = false,
  14     warnings = true;
  15 
  16   static final boolean
  17     known = true;
  18 
  19   // This next method might better be located in the code generator.  Traditionally
  20   // it has been left in the ATG file, but that might change in future years
  21   //
  22   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab
  23   // other sequences like \x \: and \9 simply map to x, ; and 9. This is not generally known.
  24 
  25   static String unescape(String s) {
  26   /* Replaces escape sequences in s by their Unicode values */
  27     StringBuilder buf = new StringBuilder();
  28     int i = 0;
  29     while (i < s.length()) {
  30       if (s.charAt(i) == '\\') {
  31         switch (s.charAt(i+1)) {
  32           case '\\': buf.append('\\'); break;
  33           case '\'': buf.append('\''); break;
  34           case '\"': buf.append('\"'); break;
  35           case  'r': buf.append('\r'); break;
  36           case  'n': buf.append('\n'); break;
  37           case  't': buf.append('\t'); break;
  38           case  'b': buf.append('\b'); break;
  39           case  'f': buf.append('\f'); break;
  40           default:   buf.append(s.charAt(i+1)); break;
  41         }
  42         i += 2;
  43       }
  44       else {
  45         buf.append(s.charAt(i));
  46         i++;
  47       }
  48     }
  49     return buf.toString();
  50   } // unescape
  51 
  52  static boolean isArith(int type) {
  53     return type == Types.intType || type == Types.charType || type == Types.noType;
  54   } // isArith
  55 
  56   static boolean isBool(int type) {
  57     return type == Types.boolType || type == Types.noType;
  58   } // isBool
  59 
  60   static boolean isArray(int type) {
  61     return (type % 2) == 1;
  62   } // isArray
  63 
  64   static boolean compatible(int typeOne, int typeTwo) {
  65   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  66     return    typeOne == typeTwo
  67            || isArith(typeOne) && isArith(typeTwo)
  68            || typeOne == Types.noType || typeTwo == Types.noType
  69            || isArray(typeOne) && typeTwo == Types.nullType
  70            || isArray(typeTwo) && typeOne == Types.nullType;
  71   } // compatible
  72 
  73   static boolean assignable(int typeOne, int typeTwo) {
  74   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  75     return    typeOne == typeTwo
  76            || typeOne == Types.intType && typeTwo == Types.charType
  77            || typeOne == Types.noType || typeTwo == Types.noType
  78            || isArray(typeOne) && typeTwo == Types.nullType;
  79   } // assignable
  80 
  81 /* -------------------------------------------------------------------------- */
  82 
  83 CHARACTERS
  84   lf         = CHR(10) .
  85   backslash  = CHR(92) .
  86   control    = CHR(0) .. CHR(31) .
  87   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  88   digit      = "0123456789" .
  89   stringCh   = ANY - '"' - control - backslash .
  90   charCh     = ANY - "'" - control - backslash .
  91   printable  = ANY - control .
  92 
  93 TOKENS
  94   identifier = letter { { "_" } (letter | digit) } .
  95   number     = digit { digit } .
  96   stringLit  = '"' { stringCh | backslash printable } '"' .
  97   charLit    = "'" ( charCh   | backslash printable ) "'" .
  98 
  99 PRAGMAS
 100   DebugOn     = "$D+" .                      (. debug     = true; .)
 101   DebugOff    = "$D-" .                      (. debug     = false; .)
 102   ProdCODOn   = "$C+" .                      (. listCode  = true; .)
 103   ProdCODOff  = "$C-" .                      (. listCode  = false; .)
 104   PrintSymbolTable = "$ST" .                 (. if (debug) Table.printTable(OutFile.StdOut); .) 
 105   PrintRuntimeStack = "$SD" .                (. if (debug) CodeGen.stack(); .)
 106   PrintRuntimeHeap = "$HD" .                 (. if (debug) CodeGen.heap(); .)
 107 
 108 
 109 COMMENTS FROM "//" TO lf
 110 COMMENTS FROM "/*" TO "*/"
 111 
 112 IGNORE CHR(9) .. CHR(13)
 113 
 114 PRODUCTIONS
 115 
 116   Parva
 117   =  "void"                                  (. Entry program = new Entry(); .)
 118      Ident<out program.name> "(" ")"         (. program.kind = Kinds.Fun;
 119                                                 program.type = Types.voidType;
 120                                                 Table.insert(program);
 121                                                 StackFrame frame = new StackFrame();
 122                                                 Table.openScope();
 123                                                 Label DSPLabel = new Label(known);
 124                                                 CodeGen.openStackFrame(0); .)
 125      WEAK "{" { Statement<frame> }
 126      WEAK "}"                                (. CodeGen.fixDSP(DSPLabel.address(), frame.size);
 127                                                 CodeGen.leaveProgram();
 128                                                 Table.closeScope(); .)
 129   .
 130 
 131   Statement<StackFrame frame>
 132   =  SYNC (   Block<frame>
 133             | ConstDeclarations
 134             | VarDeclarations<frame>
 135             | AssignmentStatement
 136             | IfStatement<frame>
 137             | WhileStatement<frame>
 138             | HaltStatement
 139             | ReadStatement
 140             | WriteStatement
 141             | ";"
 142           )
 143   .
 144 
 145   Block<StackFrame frame>
 146   =                                          (. Table.openScope(); .)
 147      "{" { Statement<frame> }
 148      WEAK "}"                                (. Table.closeScope(); .)
 149   .
 150 
 151   ConstDeclarations
 152   = "const" OneConst { WEAK "," OneConst }
 153     WEAK ";"
 154   .
 155 
 156   OneConst                                   (. Entry constant = new Entry();
 157                                                 ConstRec con; .)
 158   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 159      AssignOp Constant<out con>              (. constant.value = con.value;
 160                                                 constant.type = con.type;
 161                                                 Table.insert(constant); .)
 162   .
 163 
 164   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 165   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 166     | CharConst<out con.value>               (. con.type = Types.charType; .)
 167     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 168     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 169     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 170   .
 171 
 172   VarDeclarations<StackFrame frame>          (. int type; .)
 173   =  Type<out type>
 174      VarList<frame, type>
 175      WEAK ";"
 176   .
 177 
 178   Type<out int type>
 179   =  BasicType<out type>
 180      [ "[]"                                  (. if (type != Types.noType) type++; .)
 181      ]
 182   .
 183 
 184   BasicType<out int type>                    (. type = Types.noType; .)
 185   =   "int"                                  (. type = Types.intType; .)
 186     | "bool"                                 (. type = Types.boolType; .)
 187 	| "char"                                 (. type = Types.charType; .)
 188   .
 189 
 190   VarList<StackFrame frame, int type>
 191   =  OneVar<frame, type>
 192      { WEAK "," OneVar<frame, type> }
 193   .
 194 
 195   OneVar<StackFrame frame, int type>         (. int expType;
 196                                                 Entry var = new Entry(); .)
 197   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 198                                                 var.type = type;
 199                                                 var.offset = frame.size;
 200                                                 frame.size++; .)
 201      [ AssignOp                              (. CodeGen.loadAddress(var); .)
 202        Expression<out expType>               (. if (!assignable(var.type, expType))
 203                                                   SemError("incompatible types in assignment");
 204                                                 CodeGen.assign(var.type); .)
 205      ]                                       (. Table.insert(var); .)
 206   .
 207 
 208   AssignmentStatement
 209                                              (. int expType;
 210                                                 DesType des; .)
 211   = Designator<out des>                      (. if (des.entry.kind != Kinds.Var)
 212                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); .)
 213     AssignOp
 214     Expression<out expType>                  (. if (!assignable(des.type, expType))
 215                                                   SemError("incompatible types in assignment");
 216                                                 CodeGen.assign(des.type); .)
 217     WEAK ";"
 218   .
 219 
 220   Designator<out DesType des>                (. String name;
 221                                                 int indexType; .)
 222   =  Ident<out name>                         (. Entry entry = Table.find(name);
 223                                                 if (!entry.declared)
 224                                                   SemError("undeclared identifier");
 225                                                 des = new DesType(entry);
 226                                                 if (entry.kind == Kinds.Var)
 227                                                   CodeGen.loadAddress(entry); .)
 228      [     "["                               (. if (isArray(des.type)) des.type--;
 229                                                 else SemError("unexpected subscript");
 230                                                 if (des.entry.kind != Kinds.Var)
 231                                                   SemError("unexpected subscript");
 232                                                 CodeGen.dereference(); .)
 233               Expression<out indexType>      (. if (!isArith(indexType))
 234                                                   SemError("invalid subscript type");
 235                                                 CodeGen.index(); .)
 236 
 237            "]"
 238      ]
 239   .
 240 
 241   IfStatement<StackFrame frame>
 242                                                   (. Label falseLabel = new Label(!known); .)
 243   =  "if" "("   Condition ")" ["then"]            (. CodeGen.branchFalse(falseLabel); .)
 244       Statement<frame>                            (. falseLabel.here(); .)
 245        
 246   .
 247 
 248   WhileStatement<StackFrame frame>           (. Label loopExit  = new Label(!known);
 249                                                 Label loopStart = new Label(known); .)
 250   =  "while" "(" Condition ")"               (. CodeGen.branchFalse(loopExit); .)
 251      Statement<frame>                        (. CodeGen.branch(loopStart);
 252                                                 loopExit.here(); .)
 253   .
 254 
 255  
 256   HaltStatement
 257   =  "halt"                                  (. CodeGen.leaveProgram(); .)
 258      WEAK ";"
 259   .
 260 
 261   ReadStatement
 262   = "read" "(" ReadList")"
 263     WEAK ";"
 264   .
 265 
 266   ReadList
 267   = ReadElement { WEAK "," ReadElement }
 268   .
 269 
 270   ReadElement                                (. String str;
 271                                                 DesType des; .)
 272   =   StringConst<out str>                   (. CodeGen.writeString(str); .)
 273     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var)
 274                                                   SemError("wrong kind of identifier");
 275                                                 switch (des.type) {
 276                                                   case Types.intType:
 277                                                   case Types.boolType:
 278 												  case Types.charType:
 279                                                     CodeGen.read(des.type); break;
 280                                                   default:
 281                                                     SemError("cannot read this type"); break;
 282                                                 } .)
 283   .
 284 
 285   WriteStatement
 286   = "write" "(" WriteList ")"
 287     WEAK ";"
 288   .
 289 
 290   WriteList
 291   = WriteElement { WEAK "," WriteElement }
 292   .
 293 
 294   WriteElement                               (. int expType;
 295                                                 String str; .)
 296   =   StringConst<out str>                 (. CodeGen.writeString(str); .)
 297     | Expression<out expType>                (. if (!(isArith(expType) || expType == Types.boolType))
 298                                                   SemError("cannot write this type");
 299                                                 switch (expType) {
 300                                                   case Types.intType:
 301                                                   case Types.boolType:
 302 												  case Types.charType:
 303                                                     CodeGen.write(expType); break;
 304                                                   default:
 305                                                     break;
 306                                                 } .)
 307   .
 308 
 309   Condition                                  (. int type; .)
 310   =  Expression<out type>                    (. if (!isBool(type))
 311                                                   SemError("boolean expression needed"); .)
 312   .
 313 
 314   Expression<out int type>                   (. int type2;
 315                                                 Label shortcircuit = new Label(!known); .)
 316   =  AndExp<out type>
 317      { "||"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.or); .)
 318        AndExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 319                                                   SemError("Boolean operands needed");
 320                                                 type = Types.boolType; .)
 321      }                                       (. shortcircuit.here(); .)
 322   .
 323 
 324   AndExp<out int type>                       (. int type2;
 325                                                 Label shortcircuit = new Label(!known); .)
 326   =  EqlExp<out type>
 327      { "&&"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.and); .)
 328        EqlExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 329                                                   SemError("Boolean operands needed");
 330                                                 type = Types.boolType; .)
 331      }                                       (. shortcircuit.here(); .)
 332   .
 333 
 334   EqlExp<out int type>                       (. int type2;
 335                                                 int op; .)
 336   =  RelExp<out type>
 337      { EqualOp<out op>
 338        RelExp<out type2>                     (. if (!compatible(type, type2))
 339                                                   SemError("incomparable operand types");
 340                                                 CodeGen.comparison(op, type);
 341                                                 type = Types.boolType; .)
 342      }
 343   .
 344 
 345   RelExp<out int type>                       (. int type2;
 346                                                 int op; .)
 347   =  AddExp<out type>
 348      [ RelOp<out op>
 349        AddExp<out type2>                     (. if (!isArith(type) || !isArith(type2))
 350                                                   SemError("incomparable operand types");
 351                                                 CodeGen.comparison(op, type);
 352                                                 type = Types.boolType; .)
 353      ]
 354   .
 355 
 356   AddExp<out int type>                       (. int type2;
 357                                                 int op; .)
 358   =  MultExp<out type>
 359      { AddOp<out op>
 360        MultExp<out type2>                    (. if (!isArith(type) || !isArith(type2)) {
 361                                                   SemError("arithmetic operands needed");
 362                                                   type = Types.noType;
 363                                                 }
 364                                                 else type = Types.intType;
 365                                                 CodeGen.binaryOp(op); .)
 366      }
 367   .
 368 
 369   MultExp<out int type>                      (. int type2;
 370                                                 int op; .)
 371   =  Factor<out type>
 372      { MulOp<out op>
 373        Factor<out type2>                     (. if (!isArith(type) || !isArith(type2)) {
 374                                                   SemError("arithmetic operands needed");
 375                                                   type = Types.noType;
 376                                                 }
 377                                                 else type = Types.intType;
 378                                                 CodeGen.binaryOp(op); .)
 379      }
 380   .
 381 
 382   Factor<out int type>                       (. type = Types.noType; .)
 383   =    Primary<out type>
 384      | "+" Factor<out type>                  (. if (!isArith(type)) {
 385                                                   SemError("arithmetic operand needed");
 386                                                   type = Types.noType;
 387                                                 }
 388                                                 else type = Types.intType; .)
 389      | "-" Factor<out type>                  (. if (!isArith(type)) {
 390                                                   SemError("arithmetic operand needed");
 391                                                   type = Types.noType;
 392                                                 }
 393                                                 else type = Types.intType;
 394                                                 CodeGen.negateInteger(); .)
 395      | "!" Factor<out type>                  (. if (!isBool(type))
 396                                                   SemError("Boolean operand needed");
 397                                                 type = Types.boolType;
 398                                                 CodeGen.negateBoolean(); .)
 399   .
 400 
 401   Primary<out int type>                      (. type = Types.noType;
 402                                                 int size;
 403                                                 DesType des;
 404                                                 ConstRec con; .)
 405   =    Designator<out des>                   (. type = des.type;
 406                                                 switch (des.entry.kind) {
 407                                                   case Kinds.Var:
 408                                                     CodeGen.dereference();
 409                                                     break;
 410                                                   case Kinds.Con:
 411                                                     CodeGen.loadConstant(des.entry.value);
 412                                                     break;
 413                                                   default:
 414                                                     SemError("wrong kind of identifier");
 415                                                     break;
 416                                                 } .)
 417      | Constant<out con>                     (. type = con.type;
 418                                                 CodeGen.loadConstant(con.value); .)
 419      | "new"
 420        (   BasicType<out type>
 421            "[" Expression<out size>          (. if (!isArith(size))
 422                                                   SemError("array size must be integer");
 423                                                 type++; .)
 424            "]"
 425        )                                     (. CodeGen.allocate(); .)
 426 
 427      | "(" Expression<out type> ")"
 428   .
 429 
 430   AddOp<out int op>                          (. op = CodeGen.nop; .)
 431   =    "+"                                   (. op = CodeGen.add; .)
 432      | "-"                                   (. op = CodeGen.sub; .)
 433   .
 434 
 435   MulOp<out int op>                          (. op = CodeGen.nop; .)
 436   =    "*"                                   (. op = CodeGen.mul; .)
 437      | "/"                                   (. op = CodeGen.div; .)
 438      | "%"                                   (. op = CodeGen.rem; .)
 439   .
 440 
 441   EqualOp<out int op>                        (. op = CodeGen.nop; .)
 442   =    "=="                                  (. op = CodeGen.ceq; .)
 443      | "!="                                  (. op = CodeGen.cne; .)
 444   .
 445 
 446   RelOp<out int op>                          (. op = CodeGen.nop; .)
 447   =    "<"                                   (. op = CodeGen.clt; .)
 448      | "<="                                  (. op = CodeGen.cle; .)
 449      | ">"                                   (. op = CodeGen.cgt; .)
 450      | ">="                                  (. op = CodeGen.cge; .)
 451   .
 452 
 453   AssignOp = "=" | ":=" .
 454 
 455   Ident<out String name>
 456   =  identifier                              (. name = token.val; .)
 457   .
 458 
 459   StringConst<out String str>
 460   =  stringLit                               (. str = token.val;
 461                                                 str = unescape(str.substring(1, str.length() - 1)); .)  
 462     {["+"] stringLit                         (. String str1 = token.val;
 463                                                 str1 = unescape(str1.substring(1, str1.length() - 1));
 464                                                 str += str1; .)
 465     }                                                      
 466   .
 467 
 468   CharConst<out int value>
 469   =  charLit                                 (. String str = token.val;
 470                                                 str = unescape(str.substring(1, str.length() - 1));
 471                                                 value = str.charAt(0); .)
 472   .
 473 
 474   IntConst<out int value>
 475   =  number                                  (. try {
 476                                                   value = Integer.parseInt(token.val);
 477                                                 } catch (NumberFormatException e) {
 478                                                   value = 0; SemError("number out of range");
 479                                                 } .)
 480   .
 481 
 482 END Parva.
 483 

0 errors detected
