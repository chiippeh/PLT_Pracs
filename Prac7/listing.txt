
   1 import java.util.*;
   2 import library.*;
   3 
   4 COMPILER Parva $NC
   5 /* Parva level 1 grammar  - Coco/R for Java
   6    P.D. Terry, Rhodes University; Modified by KL Bradshaw, 2023
   7    Java operator precedences with short circuit evaluation
   8    Includes character type
   9    No functions; no optimization */
  10 
  11   public static boolean
  12     debug    = false,
  13     listCode = false,
  14     warnings = true;
  15 
  16   static final boolean
  17     known = true;
  18 
  19   public static String newFileName(String s, String ext) {
  20       int i = s.lastIndexOf('.');
  21       if (i < 0) return s + ext; else return s.substring(0, i) + ext;
  22   }
  23 
  24   // This next method might better be located in the code generator.  Traditionally
  25   // it has been left in the ATG file, but that might change in future years
  26   //
  27   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab
  28   // other sequences like \x \: and \9 simply map to x, ; and 9. This is not generally known.
  29 
  30   static String unescape(String s) {
  31   /* Replaces escape sequences in s by their Unicode values */
  32     StringBuilder buf = new StringBuilder();
  33     int i = 0;
  34     while (i < s.length()) {
  35       if (s.charAt(i) == '\\') {
  36         switch (s.charAt(i+1)) {
  37           case '\\': buf.append('\\'); break;
  38           case '\'': buf.append('\''); break;
  39           case '\"': buf.append('\"'); break;
  40           case  'r': buf.append('\r'); break;
  41           case  'n': buf.append('\n'); break;
  42           case  't': buf.append('\t'); break;
  43           case  'b': buf.append('\b'); break;
  44           case  'f': buf.append('\f'); break;
  45           default:   buf.append(s.charAt(i+1)); break;
  46         }
  47         i += 2;
  48       }
  49       else {
  50         buf.append(s.charAt(i));
  51         i++;
  52       }
  53     }
  54     return buf.toString();
  55   } // unescape
  56 
  57  static boolean isArith(int type) {
  58     return type == Types.intType || type == Types.charType || type == Types.noType;
  59   } // isArith
  60 
  61   static boolean isBool(int type) {
  62     return type == Types.boolType || type == Types.noType;
  63   } // isBool
  64 
  65   static boolean isArray(int type) {
  66     return (type % 2) == 1;
  67   } // isArray
  68 
  69   static boolean compatible(int typeOne, int typeTwo) {
  70   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  71     return    typeOne == typeTwo
  72            || isArith(typeOne) && isArith(typeTwo)
  73            || typeOne == Types.noType || typeTwo == Types.noType
  74            || isArray(typeOne) && typeTwo == Types.nullType
  75            || isArray(typeTwo) && typeOne == Types.nullType;
  76   } // compatible
  77 
  78   static boolean assignable(int typeOne, int typeTwo) {
  79   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  80     return    typeOne == typeTwo
  81            || typeOne == Types.intType && typeTwo == Types.charType
  82            || typeOne == Types.noType || typeTwo == Types.noType
  83            || isArray(typeOne) && typeTwo == Types.nullType;
  84   } // assignable
  85 
  86 /* -------------------------------------------------------------------------- */
  87 
  88 CHARACTERS
  89   lf         = CHR(10) .
  90   backslash  = CHR(92) .
  91   control    = CHR(0) .. CHR(31) .
  92   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  93   digit      = "0123456789" .
  94   stringCh   = ANY - '"' - control - backslash .
  95   charCh     = ANY - "'" - control - backslash .
  96   printable  = ANY - control .
  97 
  98 TOKENS
  99   identifier = letter { { "_" } (letter | digit) } .
 100   number     = digit { digit } .
 101   stringLit  = '"' { stringCh | backslash printable } '"' .
 102   charLit    = "'" ( charCh   | backslash printable ) "'" .
 103 
 104 PRAGMAS
 105   DebugOn     = "$D+" .                      (. debug     = true; .)
 106   DebugOff    = "$D-" .                      (. debug     = false; .)
 107   ProdCODOn   = "$C+" .                      (. listCode  = true; .)
 108   ProdCODOff  = "$C-" .                      (. listCode  = false; .)
 109   PrintSymbolTable = "$ST" .                 (. if (debug) Table.printTable(OutFile.StdOut); .) 
 110   PrintRuntimeStack = "$SD" .                (. if (debug) CodeGen.stack(); .)
 111   PrintRuntimeHeap = "$HD" .                 (. if (debug) CodeGen.heap(); .)
 112 
 113 
 114 COMMENTS FROM "//" TO lf
 115 COMMENTS FROM "/*" TO "*/"
 116 
 117 IGNORE CHR(9) .. CHR(13)
 118 
 119 PRODUCTIONS
 120 
 121   Parva
 122   =  "void"                                  (. Entry program = new Entry(); .)
 123      Ident<out program.name> "(" ")"         (. program.kind = Kinds.Fun;
 124                                                 program.type = Types.voidType;
 125                                                 Table.insert(program);
 126                                                 StackFrame frame = new StackFrame();
 127                                                 Table.openScope();
 128                                                 Label DSPLabel = new Label(known);
 129                                                 CodeGen.openStackFrame(0); .)
 130      WEAK "{" { Statement<frame> }
 131      WEAK "}"                                (. CodeGen.fixDSP(DSPLabel.address(), frame.size);
 132                                                 CodeGen.leaveProgram();
 133                                                 Table.closeScope(); .)
 134   .
 135 
 136   Statement<StackFrame frame>
 137   =  SYNC (   Block<frame>
 138             | ConstDeclarations
 139             | VarDeclarations<frame>
 140             | AssignmentStatement
 141             | IfStatement<frame>
 142             | WhileStatement<frame>
 143             | HaltStatement
 144             | ReadStatement
 145             | WriteStatement
 146             | ";"
 147           )
 148   .
 149 
 150   Block<StackFrame frame>
 151   =                                          (. Table.openScope(); .)
 152      "{" { Statement<frame> }
 153      WEAK "}"                                (. Table.closeScope(); .)
 154   .
 155 
 156   ConstDeclarations
 157   = "const" OneConst { WEAK "," OneConst }
 158     WEAK ";"
 159   .
 160 
 161   OneConst                                   (. Entry constant = new Entry();
 162                                                 ConstRec con; .)
 163   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 164      AssignOp Constant<out con>              (. constant.value = con.value;
 165                                                 constant.type = con.type;
 166                                                 Table.insert(constant); .)
 167   .
 168 
 169   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 170   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 171     | CharConst<out con.value>               (. con.type = Types.charType; .)
 172     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 173     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 174     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 175   .
 176 
 177   VarDeclarations<StackFrame frame>          (. int type; .)
 178   =  Type<out type>
 179      VarList<frame, type>
 180      WEAK ";"
 181   .
 182 
 183   Type<out int type>
 184   =  BasicType<out type>
 185      [ "[]"                                  (. if (type != Types.noType) type++; .)
 186      ]
 187   .
 188 
 189   BasicType<out int type>                    (. type = Types.noType; .)
 190   =   "int"                                  (. type = Types.intType; .)
 191     | "bool"                                 (. type = Types.boolType; .)
 192 	| "char"                                 (. type = Types.charType; .)
 193   .
 194 
 195   VarList<StackFrame frame, int type>
 196   =  OneVar<frame, type>
 197      { WEAK "," OneVar<frame, type> }
 198   .
 199 
 200   OneVar<StackFrame frame, int type>         (. int expType;
 201                                                 Entry var = new Entry(); .)
 202   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 203                                                 var.type = type;
 204                                                 var.offset = frame.size;
 205                                                 frame.size++; .)
 206      [ AssignOp                              (. CodeGen.loadAddress(var); .)
 207        Expression<out expType>               (. if (!assignable(var.type, expType))
 208                                                   SemError("incompatible types in assignment");
 209                                                 CodeGen.assign(var.type); .)
 210      ]                                       (. Table.insert(var); .)
 211   .
 212 
 213   AssignmentStatement
 214                                              (. int expType;
 215                                                 DesType des; .)
 216   = Designator<out des>                      (. if (des.entry.kind != Kinds.Var)
 217                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); .)
 218     AssignOp
 219     Expression<out expType>                  (. if (!assignable(des.type, expType))
 220                                                   SemError("incompatible types in assignment");
 221                                                 CodeGen.assign(des.type); .)
 222     WEAK ";"
 223   .
 224 
 225   Designator<out DesType des>                (. String name;
 226                                                 int indexType; .)
 227   =  Ident<out name>                         (. Entry entry = Table.find(name);
 228                                                 if (!entry.declared)
 229                                                   SemError("undeclared identifier");
 230                                                 des = new DesType(entry);
 231                                                 if (entry.kind == Kinds.Var)
 232                                                   CodeGen.loadAddress(entry); .)
 233      [     "["                               (. if (isArray(des.type)) des.type--;
 234                                                 else SemError("unexpected subscript");
 235                                                 if (des.entry.kind != Kinds.Var)
 236                                                   SemError("unexpected subscript");
 237                                                 CodeGen.dereference(); .)
 238               Expression<out indexType>      (. if (!isArith(indexType))
 239                                                   SemError("invalid subscript type");
 240                                                 CodeGen.index(); .)
 241 
 242            "]"
 243      ]
 244   .
 245 
 246   IfStatement<StackFrame frame>
 247                                              (. Label falseLabel = new Label(!known); .)
 248   =  "if" "(" Condition ")"                  (. CodeGen.branchFalse(falseLabel); .)
 249       Statement<frame> | "then" Statement<frame>  (. falseLabel.here(); .)
 250        
 251   .
 252 
 253   WhileStatement<StackFrame frame>           (. Label loopExit  = new Label(!known);
 254                                                 Label loopStart = new Label(known); .)
 255   =  "while" "(" Condition ")"               (. CodeGen.branchFalse(loopExit); .)
 256      Statement<frame>                        (. CodeGen.branch(loopStart);
 257                                                 loopExit.here(); .)
 258   .
 259 
 260  
 261   HaltStatement
 262   =  "halt"                                  (. CodeGen.leaveProgram(); .)
 263      WEAK ";"
 264   .
 265 
 266   ReadStatement
 267   = "read" "(" ReadList")"
 268     WEAK ";"
 269   .
 270 
 271   ReadList
 272   = ReadElement { WEAK "," ReadElement }
 273   .
 274 
 275   ReadElement                                (. String str;
 276                                                 DesType des; .)
 277   =   StringConst<out str>                   (. CodeGen.writeString(str); .)
 278     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var)
 279                                                   SemError("wrong kind of identifier");
 280                                                 switch (des.type) {
 281                                                   case Types.intType:
 282                                                   case Types.boolType:
 283 												  case Types.charType:
 284                                                     CodeGen.read(des.type); break;
 285                                                   default:
 286                                                     SemError("cannot read this type"); break;
 287                                                 } .)
 288   .
 289 
 290   WriteStatement
 291   = "write" "(" WriteList ")"
 292     WEAK ";"
 293   .
 294 
 295   WriteList
 296   = WriteElement { WEAK "," WriteElement }
 297   .
 298 
 299   WriteElement                               (. int expType;
 300                                                 String str; .)
 301   =   StringConst<out str>                   (. CodeGen.writeString(str); .)
 302     | Expression<out expType>                (. if (!(isArith(expType) || expType == Types.boolType))
 303                                                   SemError("cannot write this type");
 304                                                 switch (expType) {
 305                                                   case Types.intType:
 306                                                   case Types.boolType:
 307 												  case Types.charType:
 308                                                     CodeGen.write(expType); break;
 309                                                   default:
 310                                                     break;
 311                                                 } .)
 312   .
 313 
 314   Condition                                  (. int type; .)
 315   =  Expression<out type>                    (. if (!isBool(type))
 316                                                   SemError("boolean expression needed"); .)
 317   .
 318 
 319   Expression<out int type>                   (. int type2;
 320                                                 Label shortcircuit = new Label(!known); .)
 321   =  AndExp<out type>
 322      { "||"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.or); .)
 323        AndExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 324                                                   SemError("Boolean operands needed");
 325                                                 type = Types.boolType; .)
 326      }                                       (. shortcircuit.here(); .)
 327   .
 328 
 329   AndExp<out int type>                       (. int type2;
 330                                                 Label shortcircuit = new Label(!known); .)
 331   =  EqlExp<out type>
 332      { "&&"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.and); .)
 333        EqlExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 334                                                   SemError("Boolean operands needed");
 335                                                 type = Types.boolType; .)
 336      }                                       (. shortcircuit.here(); .)
 337   .
 338 
 339   EqlExp<out int type>                       (. int type2;
 340                                                 int op; .)
 341   =  RelExp<out type>
 342      { EqualOp<out op>
 343        RelExp<out type2>                     (. if (!compatible(type, type2))
 344                                                   SemError("incomparable operand types");
 345                                                 CodeGen.comparison(op, type);
 346                                                 type = Types.boolType; .)
 347      }
 348   .
 349 
 350   RelExp<out int type>                       (. int type2;
 351                                                 int op; .)
 352   =  AddExp<out type>
 353      [ RelOp<out op>
 354        AddExp<out type2>                     (. if (!isArith(type) || !isArith(type2))
 355                                                   SemError("incomparable operand types");
 356                                                 CodeGen.comparison(op, type);
 357                                                 type = Types.boolType; .)
 358      ]
 359   .
 360 
 361   AddExp<out int type>                       (. int type2;
 362                                                 int op; .)
 363   =  MultExp<out type>
 364      { AddOp<out op>
 365        MultExp<out type2>                    (. if (!isArith(type) || !isArith(type2)) {
 366                                                   SemError("arithmetic operands needed");
 367                                                   type = Types.noType;
 368                                                 }
 369                                                 else type = Types.intType;
 370                                                 CodeGen.binaryOp(op); .)
 371      }
 372   .
 373 
 374   MultExp<out int type>                      (. int type2;
 375                                                 int op; .)
 376   =  Factor<out type>
 377      { MulOp<out op>
 378        Factor<out type2>                     (. if (!isArith(type) || !isArith(type2)) {
 379                                                   SemError("arithmetic operands needed");
 380                                                   type = Types.noType;
 381                                                 }
 382                                                 else type = Types.intType;
 383                                                 CodeGen.binaryOp(op); .)
 384      }
 385   .
 386 
 387   Factor<out int type>                       (. type = Types.noType; .)
 388   =    Primary<out type>
 389      | "+" Factor<out type>                  (. if (!isArith(type)) {
 390                                                   SemError("arithmetic operand needed");
 391                                                   type = Types.noType;
 392                                                 }
 393                                                 else type = Types.intType; .)
 394      | "-" Factor<out type>                  (. if (!isArith(type)) {
 395                                                   SemError("arithmetic operand needed");
 396                                                   type = Types.noType;
 397                                                 }
 398                                                 else type = Types.intType;
 399                                                 CodeGen.negateInteger(); .)
 400      | "!" Factor<out type>                  (. if (!isBool(type))
 401                                                   SemError("Boolean operand needed");
 402                                                 type = Types.boolType;
 403                                                 CodeGen.negateBoolean(); .)
 404   .
 405 
 406   Primary<out int type>                      (. type = Types.noType;
 407                                                 int size;
 408                                                 DesType des;
 409                                                 ConstRec con; .)
 410   =    Designator<out des>                   (. type = des.type;
 411                                                 switch (des.entry.kind) {
 412                                                   case Kinds.Var:
 413                                                     CodeGen.dereference();
 414                                                     break;
 415                                                   case Kinds.Con:
 416                                                     CodeGen.loadConstant(des.entry.value);
 417                                                     break;
 418                                                   default:
 419                                                     SemError("wrong kind of identifier");
 420                                                     break;
 421                                                 } .)
 422      | Constant<out con>                     (. type = con.type;
 423                                                 CodeGen.loadConstant(con.value); .)
 424      | "new"
 425        (   BasicType<out type>
 426            "[" Expression<out size>          (. if (!isArith(size))
 427                                                   SemError("array size must be integer");
 428                                                 type++; .)
 429            "]"
 430        )                                     (. CodeGen.allocate(); .)
 431 
 432      | "(" Expression<out type> ")"
 433   .
 434 
 435   AddOp<out int op>                          (. op = CodeGen.nop; .)
 436   =    "+"                                   (. op = CodeGen.add; .)
 437      | "-"                                   (. op = CodeGen.sub; .)
 438   .
 439 
 440   MulOp<out int op>                          (. op = CodeGen.nop; .)
 441   =    "*"                                   (. op = CodeGen.mul; .)
 442      | "/"                                   (. op = CodeGen.div; .)
 443      | "%"                                   (. op = CodeGen.rem; .)
 444   .
 445 
 446   EqualOp<out int op>                        (. op = CodeGen.nop; .)
 447   =    "=="                                  (. op = CodeGen.ceq; .)
 448      | "!="                                  (. op = CodeGen.cne; .)
 449   .
 450 
 451   RelOp<out int op>                          (. op = CodeGen.nop; .)
 452   =    "<"                                   (. op = CodeGen.clt; .)
 453      | "<="                                  (. op = CodeGen.cle; .)
 454      | ">"                                   (. op = CodeGen.cgt; .)
 455      | ">="                                  (. op = CodeGen.cge; .)
 456   .
 457 
 458   AssignOp = "=" | ":=" .
 459 
 460   Ident<out String name>
 461   =  identifier                              (. name = token.val; .)
 462   .
 463 
 464   StringConst<out String str>
 465   =  stringLit                               (. str = token.val;
 466                                                 str = unescape(str.substring(1, str.length() - 1)); 
 467                                                 String str1;
 468                                                 while ( la.kind == stringLit_Sym || la.kind == charLit_Sym || la.kind == plus_Sym ) {
 469                                                   // if next symbol is + then make sure there is a string or char after it 
 470                                                   if (la.kind == plus_Sym) {
 471                                                     Get();
 472                                                     if (la.kind != stringLit_Sym && la.kind != charLit_Sym) {
 473                                                       // throw error
 474                                                       SemError("String or Character expected");
 475                                                     }
 476                                                   }
 477                                                   str1 = la.val;
 478                                                   str1 = unescape(str1.substring(1, str1.length() - 1));
 479                                                   str += str1;
 480                                                   Get();
 481                                                 }
 482                                                 .)
 483   .
 484 
 485   CharConst<out int value>
 486   =  charLit                                 (. String str = token.val;
 487                                                 str = unescape(str.substring(1, str.length() - 1));
 488                                                 value = str.charAt(0); .)
 489   .
 490 
 491   IntConst<out int value>
 492   =  number                                  (. try {
 493                                                   value = Integer.parseInt(token.val);
 494                                                 } catch (NumberFormatException e) {
 495                                                   value = 0; SemError("number out of range");
 496                                                 } .)
 497   .
 498 
 499 END Parva.
 500 

0 errors detected
