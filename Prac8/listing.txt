  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure

   1 import java.util.*;
   2 import library.*;
   3 
   4 COMPILER Parva $NC
   5 /* Parva level 1 grammar  - Coco/R for Java
   6    P.D. Terry, Rhodes University; Modified by KL Bradshaw, 2023
   7    Java operator precedences with short circuit evaluation
   8    Includes character type
   9    Solution to Prac 7 & initial grammar for Prac 8, 2023
  10    
  11    Extended (September 2023) by:
  12    Wynne Edwards g21e2079, Mila Davies g21d6937, Manu Jourdan g21j5408 */
  13 
  14   public static boolean
  15     debug    = false,
  16     listCode = false,
  17     warnings = true;
  18 
  19   static final boolean
  20     known = true;
  21 
  22   // This next method might better be located in the code generator.  Traditionally
  23   // it has been left in the ATG file, but that might change in future years
  24   //
  25   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab
  26   // other sequences like \x \: and \9 simply map to x, ; and 9. This is not generally known.
  27 
  28   static String unescape(String s) {
  29   /* Replaces escape sequences in s by their Unicode values */
  30     StringBuilder buf = new StringBuilder();
  31     int i = 0;
  32     while (i < s.length()) {
  33       if (s.charAt(i) == '\\') {
  34         switch (s.charAt(i+1)) {
  35           case '\\': buf.append('\\'); break;
  36           case '\'': buf.append('\''); break;
  37           case '\"': buf.append('\"'); break;
  38           case  'r': buf.append('\r'); break;
  39           case  'n': buf.append('\n'); break;
  40           case  't': buf.append('\t'); break;
  41           case  'b': buf.append('\b'); break;
  42           case  'f': buf.append('\f'); break;
  43           default:   buf.append(s.charAt(i+1)); break;
  44         }
  45         i += 2;
  46       }
  47       else {
  48         buf.append(s.charAt(i));
  49         i++;
  50       }
  51     }
  52     return buf.toString();
  53   } // unescape
  54 
  55  static boolean isArith(int type) {
  56     return type == Types.intType || type == Types.charType || type == Types.noType;
  57   } // isArith
  58 
  59   static boolean isBool(int type) {
  60     return type == Types.boolType || type == Types.noType;
  61   } // isBool
  62 
  63   static boolean isArray(int type) {
  64     return (type % 2) == 1;
  65   } // isArray
  66 
  67   static boolean compatible(int typeOne, int typeTwo) {
  68   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  69     return    typeOne == typeTwo
  70            || isArith(typeOne) && isArith(typeTwo)
  71            || typeOne == Types.noType || typeTwo == Types.noType
  72            || isArray(typeOne) && typeTwo == Types.nullType
  73            || isArray(typeTwo) && typeOne == Types.nullType;
  74   } // compatible
  75 
  76   static boolean assignable(int typeOne, int typeTwo) {
  77   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  78     return    typeOne == typeTwo
  79            || typeOne == Types.intType && typeTwo == Types.charType
  80            || typeOne == Types.noType || typeTwo == Types.noType
  81            || isArray(typeOne) && typeTwo == Types.nullType;
  82   } // assignable
  83 
  84 /* -------------------------------------------------------------------------- */
  85 
  86 CHARACTERS
  87   lf         = CHR(10) .
  88   backslash  = CHR(92) .
  89   control    = CHR(0) .. CHR(31) .
  90   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  91   digit      = "0123456789" .
  92   stringCh   = ANY - '"' - control - backslash .
  93   charCh     = ANY - "'" - control - backslash .
  94   printable  = ANY - control .
  95 
  96 TOKENS
  97   identifier = letter { { "_" } (letter | digit) } .
  98   number     = digit { digit } .
  99   stringLit  = '"' { stringCh | backslash printable } '"' .
 100   charLit    = "'" ( charCh   | backslash printable ) "'" .
 101 
 102 PRAGMAS
 103   CodeOn      = "$C+" .                      (. listCode  = true; .)
 104   CodeOff     = "$C-" .                      (. listCode  = false; .)
 105   DebugOn     = "$D+" .                      (. debug = true; .)
 106   DebugOff    = "$D-" .                      (. debug = false; .)
 107 
 108   StackDump   = "$SD" .                      (. if (debug) CodeGen.stack(); .)
 109   HeapDump    = "$HD" .                      (. if (debug) CodeGen.heap(); .)
 110   TableDump   = "$ST" .                      (. if (debug) Table.printTable(OutFile.StdOut);  .)
 111 
 112 
 113 COMMENTS FROM "//" TO lf
 114 COMMENTS FROM "/*" TO "*/"
 115 
 116 IGNORE CHR(9) .. CHR(13)
 117 
 118 PRODUCTIONS
 119 
 120   Parva
 121   =  "void"                                  (. Entry program = new Entry(); .)
 122      Ident<out program.name> "(" ")"         (. program.kind = Kinds.Fun;
 123                                                 program.type = Types.voidType;
 124                                                 Table.insert(program);
 125                                                 StackFrame frame = new StackFrame();
 126                                                 Label breakLabel = null;
 127                                                 Table.openScope();
 128                                                 Label DSPLabel = new Label(known);
 129                                                 CodeGen.openStackFrame(0); .)
 130      WEAK "{" { Statement<frame, breakLabel> }
 131      WEAK "}"                                (. CodeGen.fixDSP(DSPLabel.address(), frame.size);
 132                                                 CodeGen.leaveProgram();
 133                                                 Table.closeScope(); .)
 134   .
 135 
 136   Statement<StackFrame frame, Label breakLabel>
 137   =  SYNC (   Block<frame, breakLabel>
 138             | ConstDeclarations
 139             | VarDeclarations<frame>
 140             | AssignmentStatement
 141             | IfStatement<frame, breakLabel>
 142             | WhileStatement<frame>
 143             | HaltStatement
 144             | ReadStatement
 145             | WriteStatement
 146             | RepeatStatement<frame, breakLabel>
 147             | DoWhileStatement<frame, breakLabel>
 148             | BreakStatement<breakLabel>
 149             | ForStatement<frame, breakLabel>
 150             | ";"
 151           )
 152   .
 153 
 154   Block<StackFrame frame, Label breakLabel> 
 155   =                                          (. Table.openScope(); .)
 156      "{" { Statement<frame, breakLabel> }
 157      WEAK "}"                                (. Table.closeScope(); .)
 158   .
 159 
 160   ConstDeclarations
 161   = "const" OneConst { WEAK "," OneConst }
 162     WEAK ";"
 163   .
 164 
 165   OneConst                                   (. Entry constant = new Entry();
 166                                                 ConstRec con; .)
 167   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 168      AssignOp Constant<out con>              (. constant.value = con.value;
 169                                                 constant.type = con.type;
 170                                                 Table.insert(constant); .)
 171   .
 172 
 173   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 174   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 175     | CharConst<out con.value>               (. con.type = Types.charType; .)
 176     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 177     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 178     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 179   .
 180 
 181   VarDeclarations<StackFrame frame>          (. int type;
 182                                                 boolean canChange = true; .)
 183   =  [ "final"                               (. canChange = false; .)
 184      ] Type<out type>
 185      VarList<frame, type, canChange>
 186      WEAK ";"
 187   .
 188 
 189   Type<out int type>
 190   =  BasicType<out type>
 191      [ "[]"                                  (. if (type != Types.noType) type++; .)
 192      ]
 193   .
 194 
 195   BasicType<out int type>                    (. type = Types.noType; .)
 196   =   "int"                                  (. type = Types.intType; .)
 197     | "bool"                                 (. type = Types.boolType; .)
 198 	| "char"                                 (. type = Types.charType; .)
 199   .
 200 
 201   VarList<StackFrame frame, int type, boolean canChange>
 202   =  OneVar<frame, type, canChange>
 203      { WEAK "," OneVar<frame, type, canChange> }
 204   .
 205 
 206   OneVar<StackFrame frame, int type, boolean canChange>
 207                                              (. int expType;
 208                                                 Entry var = new Entry(); .)
 209   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 210                                                 var.type = type;
 211                                                 var.canChange = canChange;
 212                                                 var.offset = frame.size;
 213                                                 frame.size++; .)
 214      (   AssignOp                            (. CodeGen.loadAddress(var); .)
 215          Expression<out expType>             (. if (!assignable(var.type, expType))
 216                                                   SemError("incompatible types in assignment");
 217                                                 CodeGen.assign(var.type); .)
 218        |                                     (. if (!canChange)
 219                                                   SemError("defining expression required"); .)
 220       )                                      (. Table.insert(var); .)
 221   .
 222 
 223 
 224   AssignmentStatement
 225                                              (. int expType;
 226                                                 DesType des; .)
 227   = Designator<out des>                      (. if (des.entry.kind != Kinds.Var)
 228                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 229 												if (!des.canChange)
 230                                                   SemError("may not alter this variable"); .)
 231 	AssignOp
 232     Expression<out expType>                  (. if (!assignable(des.type, expType))
 233                                                   SemError("incompatible types in assignment");
 234                                                 CodeGen.assign(des.type); .)
 235     WEAK ";"
 236   .
 237 
 238   Designator<out DesType des>                (. String name;
 239                                                 int indexType; .)
 240   =  Ident<out name>                         (. Entry entry = Table.find(name);
 241                                                 boolean notDeclared = !entry.declared;
 242                                                 if (notDeclared) {
 243                                                   SemError("undeclared identifier");
 244                                                   entry = new Entry(); // new is critical
 245                                                   entry.name = name;   // make an entry anyway
 246                                                   entry.kind = Kinds.Var;
 247                                                   entry.type = Types.noType;
 248                                                   entry.offset = 0;    // unimportant
 249                                                   Table.insert(entry);
 250                                                 } 									  
 251                                                 des = new DesType(entry);
 252                                                 if (entry.kind == Kinds.Var)
 253                                                   CodeGen.loadAddress(entry); .)
 254      [     "["                               (. des.canChange = true;
 255 												if (notDeclared) entry.type++;
 256 												 else if (isArray(des.type)) des.type--;
 257                                                     else SemError("unexpected subscript");
 258                                                 if (des.entry.kind != Kinds.Var)
 259                                                   SemError("unexpected subscript");
 260                                                 CodeGen.dereference(); .)
 261               Expression<out indexType>      (. if (!isArith(indexType))
 262                                                   SemError("invalid subscript type");
 263                                                 CodeGen.index(); .)
 264 
 265            "]"
 266      ]
 267   .
 268 
 269   IfStatement<StackFrame frame, Label breakLabel>
 270                                              (. Label falseLabel = new Label(!known); Label exitLabel = new Label(!known); .)
 271   =  "if" "(" Condition ")"                  (. CodeGen.branchFalse(falseLabel); .)
 272       [ "then"							 	 (. SemError("then is not used in Parva"); .) 
 273       ]  Statement<frame, breakLabel>                   
 274                                              (. CodeGen.branch(exitLabel); .)
 275                                              (. falseLabel.here(); .)
 276       [ "else"                               
 277       Statement<frame, breakLabel> ]                   (. exitLabel.here(); .)    
 278   .
 279 
 280   WhileStatement<StackFrame frame>                   (. Label loopExit  = new Label(!known);
 281                                                         Label loopStart = new Label(known); .)
 282   =  "while" "(" Condition ")"                       (. CodeGen.branchFalse(loopExit); .)
 283      Statement<frame, loopExit>                      (. CodeGen.branch(loopStart);
 284                                                         loopExit.here(); .)
 285   .
 286 
 287  
 288   HaltStatement
 289   =  "halt"                                  (. CodeGen.leaveProgram(); .)
 290      WEAK ";"
 291   .
 292 
 293   ReadStatement
 294   = "read" "(" ReadList")"
 295     WEAK ";"
 296   .
 297 
 298   ReadList
 299   = ReadElement { WEAK "," ReadElement }
 300   .
 301 
 302   ReadElement                                (. String str;
 303                                                 DesType des; .)
 304   =   StringConst<out str>                   (. CodeGen.writeString(str); .)
 305     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var)
 306                                                   SemError("wrong kind of identifier");
 307 												if (!des.canChange)
 308                                                   SemError("may not alter this variable");
 309                                                 switch (des.type) {
 310                                                   case Types.intType:
 311                                                   case Types.boolType:
 312 												  case Types.charType:
 313                                                     CodeGen.read(des.type); break;
 314                                                   default:
 315                                                     SemError("cannot read this type"); break;
 316                                                 } .)
 317   .
 318 
 319   WriteStatement
 320   =   ( ( "write" "(" WriteList ")" )
 321     | ( "writeLine" "(" WriteList ")" ) ) (. CodeGen.writeLine(); .)
 322     WEAK ";"
 323   .
 324 
 325   WriteList
 326   = WriteElement { WEAK "," WriteElement }
 327   .
 328 
 329   WriteElement                               (. int expType;
 330                                                 String str; .)
 331   =   StringConst<out str>                   (. CodeGen.writeString(str); .)
 332     | Expression<out expType>                (. if (!(isArith(expType) || expType == Types.boolType))
 333                                                   SemError("cannot write this type");
 334                                                 switch (expType) {
 335                                                   case Types.intType:
 336                                                   case Types.boolType:
 337 												  case Types.charType:
 338                                                     CodeGen.write(expType); break;
 339                                                   default:
 340                                                     break;
 341                                                 } .)
 342   .
 343 
 344   RepeatStatement<StackFrame frame, Label breakLabel>  (. Label loopStart = new Label(known); Label loopExit = new Label(!known); .)
 345   =  "repeat"
 346      { Statement<frame, loopExit> }
 347      "until"
 348      "(" Condition ")"                        (. CodeGen.branchFalse(loopStart); .)
 349      ";"                                      (. loopExit.here(); .)
 350      .
 351 
 352   DoWhileStatement<StackFrame frame, Label breakLabel>  (. Label loopExit = new Label(!known); Label loopStart = new Label(known); .)
 353   = "do"                        
 354     Statement<frame, loopExit>
 355     "while"
 356     "(" Condition ")"                         (. CodeGen.branchFalse(loopExit); .)
 357                                               (. CodeGen.branch(loopStart);
 358                                                  loopExit.here(); .)
 359     ";"
 360     .
 361 
 362   BreakStatement<Label breakLabel>
 363   = "break"
 364     WEAK ";" (. if (breakLabel != null) {
 365                   CodeGen.branch(breakLabel);
 366                 } else {
 367                   SemError("break cannot be outside of loop");
 368                 } .)         
 369     . 
 370 
 371   ForStatement<StackFrame frame, Label breakLabel> (. String name; int type1, type2; .)
 372   =                                          (. Label loopExit = new Label(!known); Label loopStart = new Label(known); .)
 373     "for"                                    
 374     Ident<out name>                          (. Entry entry = Table.find(name);
 375                                                 boolean notDeclared = !entry.declared;
 376                                                 if (notDeclared) {
 377                                                   SemError("undeclared identifier");
 378                                                 } .)
 379     "in"
 380     "(" Expression<out type1>                (. if (!compatible(entry.type, type1)) {
 381                                                   SemError("incomparable types"); 
 382                                                 } .)
 383         { 
 384           "," Expression<out type2>          (. if (!compatible(entry.type, type2)) {
 385                                                   SemError("incomparable types"); 
 386                                                 } .)
 387         } 
 388     ")" Statement<frame, loopExit>           (. loopExit.here(); .)
 389     .
 390 
 391   Condition                                  (. int type; .)
 392   =  Expression<out type>                    (. if (!isBool(type))
 393                                                   SemError("boolean expression needed"); .)
 394   .
 395 
 396   Expression<out int type>                   (. int type2;
 397                                                 Label shortcircuit = new Label(!known); .)
 398   =  AndExp<out type>
 399      { "||"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.or); .)
 400        AndExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 401                                                   SemError("Boolean operands needed");
 402                                                 type = Types.boolType; .)
 403      }                                       (. shortcircuit.here(); .)
 404   .
 405 
 406   AndExp<out int type>                       (. int type2;
 407                                                 Label shortcircuit = new Label(!known); .)
 408   =  EqlExp<out type>
 409      { "&&"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.and); .)
 410        EqlExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 411                                                   SemError("Boolean operands needed");
 412                                                 type = Types.boolType; .)
 413      }                                       (. shortcircuit.here(); .)
 414   .
 415 
 416   EqlExp<out int type>                       (. int type2;
 417                                                 int op; .)
 418   =  RelExp<out type>
 419      { EqualOp<out op>
 420        RelExp<out type2>                     (. if (!compatible(type, type2))
 421                                                   SemError("incomparable operand types");
 422                                                 CodeGen.comparison(op, type);
 423                                                 type = Types.boolType; .)
 424      }
 425   .
 426 
 427   RelExp<out int type>                       (. int type2;
 428                                                 int op; .)
 429   =  AddExp<out type>
 430      [ RelOp<out op>
 431        AddExp<out type2>                     (. if (!isArith(type) || !isArith(type2))
 432                                                   SemError("incomparable operand types");
 433                                                 CodeGen.comparison(op, type);
 434                                                 type = Types.boolType; .)
 435      ]
 436   .
 437 
 438   AddExp<out int type>                       (. int type2;
 439                                                 int op; .)
 440   =  MultExp<out type>
 441      { AddOp<out op>
 442        MultExp<out type2>                    (. if (!isArith(type) || !isArith(type2)) {
 443                                                   SemError("arithmetic operands needed");
 444                                                   type = Types.noType;
 445                                                 }
 446                                                 else type = Types.intType;
 447                                                 CodeGen.binaryOp(op); .)
 448      }
 449   .
 450 
 451   MultExp<out int type>                      (. int type2;
 452                                                 int op; .)
 453   =  Factor<out type>
 454      { MulOp<out op>
 455        Factor<out type2>                     (. if (!isArith(type) || !isArith(type2)) {
 456                                                   SemError("arithmetic operands needed");
 457                                                   type = Types.noType;
 458                                                 }
 459                                                 else type = Types.intType;
 460                                                 CodeGen.binaryOp(op); .)
 461      }
 462   .
 463 
 464   Factor<out int type>                       (. type = Types.noType; .)
 465   =    Primary<out type>
 466      | "+" Factor<out type>                  (. if (!isArith(type)) {
 467                                                   SemError("arithmetic operand needed");
 468                                                   type = Types.noType;
 469                                                 }
 470                                                 else type = Types.intType; .)
 471      | "-" Factor<out type>                  (. if (!isArith(type)) {
 472                                                   SemError("arithmetic operand needed");
 473                                                   type = Types.noType;
 474                                                 }
 475                                                 else type = Types.intType;
 476                                                 CodeGen.negateInteger(); .)
 477      | "!" Factor<out type>                  (. if (!isBool(type))
 478                                                   SemError("Boolean operand needed");
 479                                                 type = Types.boolType;
 480                                                 CodeGen.negateBoolean(); .)
 481   .
 482 
 483   Primary<out int type>                      (. type = Types.noType;
 484                                                 int size;
 485                                                 DesType des;
 486                                                 ConstRec con; .)
 487   =    Designator<out des>                   (. type = des.type;
 488                                                 switch (des.entry.kind) {
 489                                                   case Kinds.Var:
 490                                                     CodeGen.dereference();
 491                                                     break;
 492                                                   case Kinds.Con:
 493                                                     CodeGen.loadConstant(des.entry.value);
 494                                                     break;
 495                                                   default:
 496                                                     SemError("wrong kind of identifier");
 497                                                     break;
 498                                                 } .)
 499      | Constant<out con>                     (. type = con.type;
 500                                                 CodeGen.loadConstant(con.value); .)
 501      | "new"
 502        (   BasicType<out type>
 503            "[" Expression<out size>          (. if (!isArith(size))
 504                                                   SemError("array size must be integer");
 505                                                 type++; .)
 506            "]"
 507        )                                     (. CodeGen.allocate(); .)
 508 
 509      | "(" Expression<out type> ")"
 510   .
 511 
 512   AddOp<out int op>                          (. op = CodeGen.nop; .)
 513   =    "+"                                   (. op = CodeGen.add; .)
 514      | "-"                                   (. op = CodeGen.sub; .)
 515   .
 516 
 517   MulOp<out int op>                          (. op = CodeGen.nop; .)
 518   =    "*"                                   (. op = CodeGen.mul; .)
 519      | "/"                                   (. op = CodeGen.div; .)
 520      | "%"                                   (. op = CodeGen.rem; .)
 521   .
 522 
 523   EqualOp<out int op>                        (. op = CodeGen.nop; .)
 524   =    "=="                                  (. op = CodeGen.ceq; .)
 525      | "!="                                  (. op = CodeGen.cne; .)
 526      | "="                                   (. SemError("== intended?"); .)
 527      | "<>"                                  (. SemError("!= intended?"); .)
 528   .
 529 
 530   RelOp<out int op>                          (. op = CodeGen.nop; .)
 531   =    "<"                                   (. op = CodeGen.clt; .)
 532      | "<="                                  (. op = CodeGen.cle; .)
 533      | ">"                                   (. op = CodeGen.cgt; .)
 534      | ">="                                  (. op = CodeGen.cge; .)
 535   .
 536 
 537   AssignOp 
 538   =     "=" 
 539 	  | ":=" 								 (. SemError("= intended?"); .) 
 540   .
 541 
 542   Ident<out String name>
 543   =  identifier                              (. name = token.val; .)
 544   .
 545 
 546   StringConst<out String str>                (. String str2; .)
 547   = OneString<out str>
 548     { [ "+" ] OneString<out str2>            (. str = str + str2; .)
 549     } .
 550 
 551   OneString<out String str>
 552   =  stringLit                               (. str = token.val;
 553                                                 str = unescape(str.substring(1, str.length() - 1)); .)
 554   .
 555 
 556   CharConst<out int value>
 557   =  charLit                                 (. String str = token.val;
 558                                                 str = unescape(str.substring(1, str.length() - 1));
 559                                                 value = str.charAt(0); .)
 560   .
 561 
 562   IntConst<out int value>
 563   =  number                                  (. try {
 564                                                   value = Integer.parseInt(token.val);
 565                                                 } catch (NumberFormatException e) {
 566                                                   value = 0; SemError("number out of range");
 567                                                 } .)
 568   .
 569 
 570 END Parva.
 571 

0 errors detected
1 warnings detected
