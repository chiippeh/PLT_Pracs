
   1 import java.util.*;
   2 import library.*;
   3 
   4 COMPILER Parva $NC
   5 /* Parva level 1 grammar  - Coco/R for Java
   6    P.D. Terry, Rhodes University; Modified by KL Bradshaw, 2023
   7    Java operator precedences with short circuit evaluation
   8    Includes character type
   9    Solution to Prac 7 & initial grammar for Prac 8, 2023*/
  10 
  11   public static boolean
  12     debug    = false,
  13     listCode = false,
  14     warnings = true;
  15 
  16   static final boolean
  17     known = true;
  18 
  19   // This next method might better be located in the code generator.  Traditionally
  20   // it has been left in the ATG file, but that might change in future years
  21   //
  22   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab
  23   // other sequences like \x \: and \9 simply map to x, ; and 9. This is not generally known.
  24 
  25   static String unescape(String s) {
  26   /* Replaces escape sequences in s by their Unicode values */
  27     StringBuilder buf = new StringBuilder();
  28     int i = 0;
  29     while (i < s.length()) {
  30       if (s.charAt(i) == '\\') {
  31         switch (s.charAt(i+1)) {
  32           case '\\': buf.append('\\'); break;
  33           case '\'': buf.append('\''); break;
  34           case '\"': buf.append('\"'); break;
  35           case  'r': buf.append('\r'); break;
  36           case  'n': buf.append('\n'); break;
  37           case  't': buf.append('\t'); break;
  38           case  'b': buf.append('\b'); break;
  39           case  'f': buf.append('\f'); break;
  40           default:   buf.append(s.charAt(i+1)); break;
  41         }
  42         i += 2;
  43       }
  44       else {
  45         buf.append(s.charAt(i));
  46         i++;
  47       }
  48     }
  49     return buf.toString();
  50   } // unescape
  51 
  52  static boolean isArith(int type) {
  53     return type == Types.intType || type == Types.charType || type == Types.noType;
  54   } // isArith
  55 
  56   static boolean isBool(int type) {
  57     return type == Types.boolType || type == Types.noType;
  58   } // isBool
  59 
  60   static boolean isArray(int type) {
  61     return (type % 2) == 1;
  62   } // isArray
  63 
  64   static boolean compatible(int typeOne, int typeTwo) {
  65   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  66     return    typeOne == typeTwo
  67            || isArith(typeOne) && isArith(typeTwo)
  68            || typeOne == Types.noType || typeTwo == Types.noType
  69            || isArray(typeOne) && typeTwo == Types.nullType
  70            || isArray(typeTwo) && typeOne == Types.nullType;
  71   } // compatible
  72 
  73   static boolean assignable(int typeOne, int typeTwo) {
  74   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  75     return    typeOne == typeTwo
  76            || typeOne == Types.intType && typeTwo == Types.charType
  77            || typeOne == Types.noType || typeTwo == Types.noType
  78            || isArray(typeOne) && typeTwo == Types.nullType;
  79   } // assignable
  80 
  81 /* -------------------------------------------------------------------------- */
  82 
  83 CHARACTERS
  84   lf         = CHR(10) .
  85   backslash  = CHR(92) .
  86   control    = CHR(0) .. CHR(31) .
  87   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  88   digit      = "0123456789" .
  89   stringCh   = ANY - '"' - control - backslash .
  90   charCh     = ANY - "'" - control - backslash .
  91   printable  = ANY - control .
  92 
  93 TOKENS
  94   identifier = letter { { "_" } (letter | digit) } .
  95   number     = digit { digit } .
  96   stringLit  = '"' { stringCh | backslash printable } '"' .
  97   charLit    = "'" ( charCh   | backslash printable ) "'" .
  98 
  99 PRAGMAS
 100   CodeOn      = "$C+" .                      (. listCode  = true; .)
 101   CodeOff     = "$C-" .                      (. listCode  = false; .)
 102   DebugOn     = "$D+" .                      (. debug = true; .)
 103   DebugOff    = "$D-" .                      (. debug = false; .)
 104 
 105   StackDump   = "$SD" .                      (. if (debug) CodeGen.stack(); .)
 106   HeapDump    = "$HD" .                      (. if (debug) CodeGen.heap(); .)
 107   TableDump   = "$ST" .                      (. if (debug) Table.printTable(OutFile.StdOut);  .)
 108 
 109 
 110 COMMENTS FROM "//" TO lf
 111 COMMENTS FROM "/*" TO "*/"
 112 
 113 IGNORE CHR(9) .. CHR(13)
 114 
 115 PRODUCTIONS
 116 
 117   Parva
 118   =  "void"                                  (. Entry program = new Entry(); .)
 119      Ident<out program.name> "(" ")"         (. program.kind = Kinds.Fun;
 120                                                 program.type = Types.voidType;
 121                                                 Table.insert(program);
 122                                                 StackFrame frame = new StackFrame();
 123                                                 Table.openScope();
 124                                                 Label DSPLabel = new Label(known);
 125                                                 CodeGen.openStackFrame(0); .)
 126      WEAK "{" { Statement<frame> }
 127      WEAK "}"                                (. CodeGen.fixDSP(DSPLabel.address(), frame.size);
 128                                                 CodeGen.leaveProgram();
 129                                                 Table.closeScope(); .)
 130   .
 131 
 132   Statement<StackFrame frame>
 133   =  SYNC (   Block<frame>
 134             | ConstDeclarations
 135             | VarDeclarations<frame>
 136             | AssignmentStatement
 137             | IfStatement<frame>
 138             | WhileStatement<frame>
 139             | HaltStatement
 140             | ReadStatement
 141             | WriteStatement
 142             | RepeatStatement<frame>
 143             | DoWhileStatement<frame>
 144             | ";"
 145           )
 146   .
 147 
 148   Block<StackFrame frame>
 149   =                                          (. Table.openScope(); .)
 150      "{" { Statement<frame> }
 151      WEAK "}"                                (. Table.closeScope(); .)
 152   .
 153 
 154   ConstDeclarations
 155   = "const" OneConst { WEAK "," OneConst }
 156     WEAK ";"
 157   .
 158 
 159   OneConst                                   (. Entry constant = new Entry();
 160                                                 ConstRec con; .)
 161   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 162      AssignOp Constant<out con>              (. constant.value = con.value;
 163                                                 constant.type = con.type;
 164                                                 Table.insert(constant); .)
 165   .
 166 
 167   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 168   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 169     | CharConst<out con.value>               (. con.type = Types.charType; .)
 170     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 171     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 172     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 173   .
 174 
 175   VarDeclarations<StackFrame frame>          (. int type;
 176                                                 boolean canChange = true; .)
 177   =  [ "final"                               (. canChange = false; .)
 178      ] Type<out type>
 179      VarList<frame, type, canChange>
 180      WEAK ";"
 181   .
 182 
 183   Type<out int type>
 184   =  BasicType<out type>
 185      [ "[]"                                  (. if (type != Types.noType) type++; .)
 186      ]
 187   .
 188 
 189   BasicType<out int type>                    (. type = Types.noType; .)
 190   =   "int"                                  (. type = Types.intType; .)
 191     | "bool"                                 (. type = Types.boolType; .)
 192 	| "char"                                 (. type = Types.charType; .)
 193   .
 194 
 195   VarList<StackFrame frame, int type, boolean canChange>
 196   =  OneVar<frame, type, canChange>
 197      { WEAK "," OneVar<frame, type, canChange> }
 198   .
 199 
 200   OneVar<StackFrame frame, int type, boolean canChange>
 201                                              (. int expType;
 202                                                 Entry var = new Entry(); .)
 203   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 204                                                 var.type = type;
 205                                                 var.canChange = canChange;
 206                                                 var.offset = frame.size;
 207                                                 frame.size++; .)
 208      (   AssignOp                            (. CodeGen.loadAddress(var); .)
 209          Expression<out expType>             (. if (!assignable(var.type, expType))
 210                                                   SemError("incompatible types in assignment");
 211                                                 CodeGen.assign(var.type); .)
 212        |                                     (. if (!canChange)
 213                                                   SemError("defining expression required"); .)
 214       )                                      (. Table.insert(var); .)
 215   .
 216 
 217 
 218   AssignmentStatement
 219                                              (. int expType;
 220                                                 DesType des; .)
 221   = Designator<out des>                      (. if (des.entry.kind != Kinds.Var)
 222                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 223 												if (!des.canChange)
 224                                                   SemError("may not alter this variable"); .)
 225 	AssignOp
 226     Expression<out expType>                  (. if (!assignable(des.type, expType))
 227                                                   SemError("incompatible types in assignment");
 228                                                 CodeGen.assign(des.type); .)
 229     WEAK ";"
 230   .
 231 
 232   Designator<out DesType des>                (. String name;
 233                                                 int indexType; .)
 234   =  Ident<out name>                         (. Entry entry = Table.find(name);
 235                                                 boolean notDeclared = !entry.declared;
 236                                                 if (notDeclared) {
 237                                                   SemError("undeclared identifier");
 238                                                   entry = new Entry(); // new is critical
 239                                                   entry.name = name;   // make an entry anyway
 240                                                   entry.kind = Kinds.Var;
 241                                                   entry.type = Types.noType;
 242                                                   entry.offset = 0;    // unimportant
 243                                                   Table.insert(entry);
 244                                                 } 									  
 245                                                 des = new DesType(entry);
 246                                                 if (entry.kind == Kinds.Var)
 247                                                   CodeGen.loadAddress(entry); .)
 248      [     "["                               (. des.canChange = true;
 249 												if (notDeclared) entry.type++;
 250 												 else if (isArray(des.type)) des.type--;
 251                                                     else SemError("unexpected subscript");
 252                                                 if (des.entry.kind != Kinds.Var)
 253                                                   SemError("unexpected subscript");
 254                                                 CodeGen.dereference(); .)
 255               Expression<out indexType>      (. if (!isArith(indexType))
 256                                                   SemError("invalid subscript type");
 257                                                 CodeGen.index(); .)
 258 
 259            "]"
 260      ]
 261   .
 262 
 263   IfStatement<StackFrame frame>
 264                                              (. Label falseLabel = new Label(!known); .)
 265   =  "if" "(" Condition ")"                  (. CodeGen.branchFalse(falseLabel); .)
 266       [ "then"								 (. SemError("then is not used in Parva"); .) 
 267       ]  Statement<frame>                    (. falseLabel.here(); .)
 268   .
 269 
 270   WhileStatement<StackFrame frame>           (. Label loopExit  = new Label(!known);
 271                                                 Label loopStart = new Label(known); .)
 272   =  "while" "(" Condition ")"               (. CodeGen.branchFalse(loopExit); .)
 273      Statement<frame>                        (. CodeGen.branch(loopStart);
 274                                                 loopExit.here(); .)
 275   .
 276 
 277  
 278   HaltStatement
 279   =  "halt"                                  (. CodeGen.leaveProgram(); .)
 280      WEAK ";"
 281   .
 282 
 283   ReadStatement
 284   = "read" "(" ReadList")"
 285     WEAK ";"
 286   .
 287 
 288   ReadList
 289   = ReadElement { WEAK "," ReadElement }
 290   .
 291 
 292   ReadElement                                (. String str;
 293                                                 DesType des; .)
 294   =   StringConst<out str>                   (. CodeGen.writeString(str); .)
 295     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var)
 296                                                   SemError("wrong kind of identifier");
 297 												if (!des.canChange)
 298                                                   SemError("may not alter this variable");
 299                                                 switch (des.type) {
 300                                                   case Types.intType:
 301                                                   case Types.boolType:
 302 												  case Types.charType:
 303                                                     CodeGen.read(des.type); break;
 304                                                   default:
 305                                                     SemError("cannot read this type"); break;
 306                                                 } .)
 307   .
 308 
 309   WriteStatement
 310   =   ( "write" "(" WriteList ")" )
 311     | ( "writeLine" "(" WriteList ")" ) (. CodeGen.writeLine(); .)
 312       WEAK ";"
 313   .
 314 
 315   WriteList
 316   = WriteElement { WEAK "," WriteElement }
 317   .
 318 
 319   WriteElement                               (. int expType;
 320                                                 String str; .)
 321   =   StringConst<out str>                   (. CodeGen.writeString(str); .)
 322     | Expression<out expType>                (. if (!(isArith(expType) || expType == Types.boolType))
 323                                                   SemError("cannot write this type");
 324                                                 switch (expType) {
 325                                                   case Types.intType:
 326                                                   case Types.boolType:
 327 												  case Types.charType:
 328                                                     CodeGen.write(expType); break;
 329                                                   default:
 330                                                     break;
 331                                                 } .)
 332   .
 333 
 334   RepeatStatement<StackFrame frame>           (. Label loopStart = new Label(known); .)
 335   =  "repeat"
 336      {Statement<frame>}
 337      "until"
 338      "(" Condition ")"                        (. CodeGen.branchFalse(loopStart); .)
 339      ";"
 340      .
 341 
 342   DoWhileStatement<StackFrame frame>          (. Label loopExit = new Label(!known); 
 343                                                  Label loopStart = new Label(known); .)
 344   = "do"                        
 345     Statement<frame>
 346     "while"
 347     "(" Condition ")"                         (. CodeGen.branchFalse(loopExit); .)
 348                                               (. CodeGen.branch(loopStart);
 349                                                  loopExit.here(); .)
 350     ";"
 351     .
 352 
 353 
 354   Condition                                  (. int type; .)
 355   =  Expression<out type>                    (. if (!isBool(type))
 356                                                   SemError("boolean expression needed"); .)
 357   .
 358 
 359   Expression<out int type>                   (. int type2;
 360                                                 Label shortcircuit = new Label(!known); .)
 361   =  AndExp<out type>
 362      { "||"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.or); .)
 363        AndExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 364                                                   SemError("Boolean operands needed");
 365                                                 type = Types.boolType; .)
 366      }                                       (. shortcircuit.here(); .)
 367   .
 368 
 369   AndExp<out int type>                       (. int type2;
 370                                                 Label shortcircuit = new Label(!known); .)
 371   =  EqlExp<out type>
 372      { "&&"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.and); .)
 373        EqlExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 374                                                   SemError("Boolean operands needed");
 375                                                 type = Types.boolType; .)
 376      }                                       (. shortcircuit.here(); .)
 377   .
 378 
 379   EqlExp<out int type>                       (. int type2;
 380                                                 int op; .)
 381   =  RelExp<out type>
 382      { EqualOp<out op>
 383        RelExp<out type2>                     (. if (!compatible(type, type2))
 384                                                   SemError("incomparable operand types");
 385                                                 CodeGen.comparison(op, type);
 386                                                 type = Types.boolType; .)
 387      }
 388   .
 389 
 390   RelExp<out int type>                       (. int type2;
 391                                                 int op; .)
 392   =  AddExp<out type>
 393      [ RelOp<out op>
 394        AddExp<out type2>                     (. if (!isArith(type) || !isArith(type2))
 395                                                   SemError("incomparable operand types");
 396                                                 CodeGen.comparison(op, type);
 397                                                 type = Types.boolType; .)
 398      ]
 399   .
 400 
 401   AddExp<out int type>                       (. int type2;
 402                                                 int op; .)
 403   =  MultExp<out type>
 404      { AddOp<out op>
 405        MultExp<out type2>                    (. if (!isArith(type) || !isArith(type2)) {
 406                                                   SemError("arithmetic operands needed");
 407                                                   type = Types.noType;
 408                                                 }
 409                                                 else type = Types.intType;
 410                                                 CodeGen.binaryOp(op); .)
 411      }
 412   .
 413 
 414   MultExp<out int type>                      (. int type2;
 415                                                 int op; .)
 416   =  Factor<out type>
 417      { MulOp<out op>
 418        Factor<out type2>                     (. if (!isArith(type) || !isArith(type2)) {
 419                                                   SemError("arithmetic operands needed");
 420                                                   type = Types.noType;
 421                                                 }
 422                                                 else type = Types.intType;
 423                                                 CodeGen.binaryOp(op); .)
 424      }
 425   .
 426 
 427   Factor<out int type>                       (. type = Types.noType; .)
 428   =    Primary<out type>
 429      | "+" Factor<out type>                  (. if (!isArith(type)) {
 430                                                   SemError("arithmetic operand needed");
 431                                                   type = Types.noType;
 432                                                 }
 433                                                 else type = Types.intType; .)
 434      | "-" Factor<out type>                  (. if (!isArith(type)) {
 435                                                   SemError("arithmetic operand needed");
 436                                                   type = Types.noType;
 437                                                 }
 438                                                 else type = Types.intType;
 439                                                 CodeGen.negateInteger(); .)
 440      | "!" Factor<out type>                  (. if (!isBool(type))
 441                                                   SemError("Boolean operand needed");
 442                                                 type = Types.boolType;
 443                                                 CodeGen.negateBoolean(); .)
 444   .
 445 
 446   Primary<out int type>                      (. type = Types.noType;
 447                                                 int size;
 448                                                 DesType des;
 449                                                 ConstRec con; .)
 450   =    Designator<out des>                   (. type = des.type;
 451                                                 switch (des.entry.kind) {
 452                                                   case Kinds.Var:
 453                                                     CodeGen.dereference();
 454                                                     break;
 455                                                   case Kinds.Con:
 456                                                     CodeGen.loadConstant(des.entry.value);
 457                                                     break;
 458                                                   default:
 459                                                     SemError("wrong kind of identifier");
 460                                                     break;
 461                                                 } .)
 462      | Constant<out con>                     (. type = con.type;
 463                                                 CodeGen.loadConstant(con.value); .)
 464      | "new"
 465        (   BasicType<out type>
 466            "[" Expression<out size>          (. if (!isArith(size))
 467                                                   SemError("array size must be integer");
 468                                                 type++; .)
 469            "]"
 470        )                                     (. CodeGen.allocate(); .)
 471 
 472      | "(" Expression<out type> ")"
 473   .
 474 
 475   AddOp<out int op>                          (. op = CodeGen.nop; .)
 476   =    "+"                                   (. op = CodeGen.add; .)
 477      | "-"                                   (. op = CodeGen.sub; .)
 478   .
 479 
 480   MulOp<out int op>                          (. op = CodeGen.nop; .)
 481   =    "*"                                   (. op = CodeGen.mul; .)
 482      | "/"                                   (. op = CodeGen.div; .)
 483      | "%"                                   (. op = CodeGen.rem; .)
 484   .
 485 
 486   EqualOp<out int op>                        (. op = CodeGen.nop; .)
 487   =    "=="                                  (. op = CodeGen.ceq; .)
 488      | "!="                                  (. op = CodeGen.cne; .)
 489      | "="                                   (. SemError("== intended?"); .)
 490      | "<>"                                  (. SemError("!= intended?"); .)
 491   .
 492 
 493   RelOp<out int op>                          (. op = CodeGen.nop; .)
 494   =    "<"                                   (. op = CodeGen.clt; .)
 495      | "<="                                  (. op = CodeGen.cle; .)
 496      | ">"                                   (. op = CodeGen.cgt; .)
 497      | ">="                                  (. op = CodeGen.cge; .)
 498   .
 499 
 500   AssignOp 
 501   =     "=" 
 502 	  | ":=" 								 (. SemError("= intended?"); .) 
 503   .
 504 
 505   Ident<out String name>
 506   =  identifier                              (. name = token.val; .)
 507   .
 508 
 509   StringConst<out String str>                (. String str2; .)
 510   = OneString<out str>
 511     { [ "+" ] OneString<out str2>            (. str = str + str2; .)
 512     } .
 513 
 514   OneString<out String str>
 515   =  stringLit                               (. str = token.val;
 516                                                 str = unescape(str.substring(1, str.length() - 1)); .)
 517   .
 518 
 519   CharConst<out int value>
 520   =  charLit                                 (. String str = token.val;
 521                                                 str = unescape(str.substring(1, str.length() - 1));
 522                                                 value = str.charAt(0); .)
 523   .
 524 
 525   IntConst<out int value>
 526   =  number                                  (. try {
 527                                                   value = Integer.parseInt(token.val);
 528                                                 } catch (NumberFormatException e) {
 529                                                   value = 0; SemError("number out of range");
 530                                                 } .)
 531   .
 532 
 533 END Parva.
 534 

0 errors detected
