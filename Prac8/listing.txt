
   1 import java.util.*;
   2 import library.*;
   3 
   4 COMPILER Parva $NC
   5 /* Parva level 1 grammar  - Coco/R for Java
   6    P.D. Terry, Rhodes University; Modified by KL Bradshaw, 2023
   7    Java operator precedences with short circuit evaluation
   8    Includes character type
   9    Solution to Prac 7 & initial grammar for Prac 8, 2023
  10    
  11    Extended (September 2023) by:
  12    Wynne Edwards g21e2079, Mila Davies g21d6937, Manu Jourdan g21j5408 */
  13 
  14   public static boolean
  15     debug    = false,
  16     listCode = false,
  17     warnings = true;
  18 
  19   static final boolean
  20     known = true;
  21 
  22   // This next method might better be located in the code generator.  Traditionally
  23   // it has been left in the ATG file, but that might change in future years
  24   //
  25   // Not that while sequences like \n \r and \t result in special mappings to lf, cr and tab
  26   // other sequences like \x \: and \9 simply map to x, ; and 9. This is not generally known.
  27 
  28   static String unescape(String s) {
  29   /* Replaces escape sequences in s by their Unicode values */
  30     StringBuilder buf = new StringBuilder();
  31     int i = 0;
  32     while (i < s.length()) {
  33       if (s.charAt(i) == '\\') {
  34         switch (s.charAt(i+1)) {
  35           case '\\': buf.append('\\'); break;
  36           case '\'': buf.append('\''); break;
  37           case '\"': buf.append('\"'); break;
  38           case  'r': buf.append('\r'); break;
  39           case  'n': buf.append('\n'); break;
  40           case  't': buf.append('\t'); break;
  41           case  'b': buf.append('\b'); break;
  42           case  'f': buf.append('\f'); break;
  43           default:   buf.append(s.charAt(i+1)); break;
  44         }
  45         i += 2;
  46       }
  47       else {
  48         buf.append(s.charAt(i));
  49         i++;
  50       }
  51     }
  52     return buf.toString();
  53   } // unescape
  54 
  55  static boolean isArith(int type) {
  56     return type == Types.intType || type == Types.charType || type == Types.noType;
  57   } // isArith
  58 
  59   static boolean isBool(int type) {
  60     return type == Types.boolType || type == Types.noType;
  61   } // isBool
  62 
  63   static boolean isArray(int type) {
  64     return (type % 2) == 1;
  65   } // isArray
  66 
  67   static boolean compatible(int typeOne, int typeTwo) {
  68   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  69     return    typeOne == typeTwo
  70            || isArith(typeOne) && isArith(typeTwo)
  71            || typeOne == Types.noType || typeTwo == Types.noType
  72            || isArray(typeOne) && typeTwo == Types.nullType
  73            || isArray(typeTwo) && typeOne == Types.nullType;
  74   } // compatible
  75 
  76   static boolean assignable(int typeOne, int typeTwo) {
  77   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  78     return    typeOne == typeTwo
  79            || typeOne == Types.intType && typeTwo == Types.charType
  80            || typeOne == Types.noType || typeTwo == Types.noType
  81            || isArray(typeOne) && typeTwo == Types.nullType;
  82   } // assignable
  83 
  84 /* -------------------------------------------------------------------------- */
  85 
  86 CHARACTERS
  87   lf         = CHR(10) .
  88   backslash  = CHR(92) .
  89   control    = CHR(0) .. CHR(31) .
  90   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  91   digit      = "0123456789" .
  92   stringCh   = ANY - '"' - control - backslash .
  93   charCh     = ANY - "'" - control - backslash .
  94   printable  = ANY - control .
  95 
  96 TOKENS
  97   identifier = letter { { "_" } (letter | digit) } .
  98   number     = digit { digit } .
  99   stringLit  = '"' { stringCh | backslash printable } '"' .
 100   charLit    = "'" ( charCh   | backslash printable ) "'" .
 101 
 102 PRAGMAS
 103   CodeOn      = "$C+" .                      (. listCode  = true; .)
 104   CodeOff     = "$C-" .                      (. listCode  = false; .)
 105   DebugOn     = "$D+" .                      (. debug = true; .)
 106   DebugOff    = "$D-" .                      (. debug = false; .)
 107 
 108   StackDump   = "$SD" .                      (. if (debug) CodeGen.stack(); .)
 109   HeapDump    = "$HD" .                      (. if (debug) CodeGen.heap(); .)
 110   TableDump   = "$ST" .                      (. if (debug) Table.printTable(OutFile.StdOut);  .)
 111 
 112 
 113 COMMENTS FROM "//" TO lf
 114 COMMENTS FROM "/*" TO "*/"
 115 
 116 IGNORE CHR(9) .. CHR(13)
 117 
 118 PRODUCTIONS
 119 
 120   Parva
 121   =  "void"                                  (. Entry program = new Entry(); .)
 122      Ident<out program.name> "(" ")"         (. program.kind = Kinds.Fun;
 123                                                 program.type = Types.voidType;
 124                                                 Table.insert(program);
 125                                                 StackFrame frame = new StackFrame();
 126                                                 Table.openScope();
 127                                                 Label DSPLabel = new Label(known);
 128                                                 CodeGen.openStackFrame(0); .)
 129      WEAK "{" { Statement<frame> }
 130      WEAK "}"                                (. CodeGen.fixDSP(DSPLabel.address(), frame.size);
 131                                                 CodeGen.leaveProgram();
 132                                                 Table.closeScope(); .)
 133   .
 134 
 135   Statement<StackFrame frame>
 136   =  SYNC (   Block<frame>
 137             | ConstDeclarations
 138             | VarDeclarations<frame>
 139             | AssignmentStatement
 140             | IfStatement<frame>
 141             | WhileStatement<frame>
 142             | HaltStatement
 143             | ReadStatement
 144             | WriteStatement
 145             | RepeatStatement<frame>
 146             | DoWhileStatement<frame>
 147             | ";"
 148           )
 149   .
 150 
 151   Block<StackFrame frame>
 152   =                                          (. Table.openScope(); .)
 153      "{" { Statement<frame> }
 154      WEAK "}"                                (. Table.closeScope(); .)
 155   .
 156 
 157   ConstDeclarations
 158   = "const" OneConst { WEAK "," OneConst }
 159     WEAK ";"
 160   .
 161 
 162   OneConst                                   (. Entry constant = new Entry();
 163                                                 ConstRec con; .)
 164   =  Ident<out constant.name>                (. constant.kind = Kinds.Con; .)
 165      AssignOp Constant<out con>              (. constant.value = con.value;
 166                                                 constant.type = con.type;
 167                                                 Table.insert(constant); .)
 168   .
 169 
 170   Constant<out ConstRec con>                 (. con = new ConstRec(); .)
 171   =   IntConst<out con.value>                (. con.type = Types.intType; .)
 172     | CharConst<out con.value>               (. con.type = Types.charType; .)
 173     | "true"                                 (. con.type = Types.boolType; con.value = 1; .)
 174     | "false"                                (. con.type = Types.boolType; con.value = 0; .)
 175     | "null"                                 (. con.type = Types.nullType; con.value = 0; .)
 176   .
 177 
 178   VarDeclarations<StackFrame frame>          (. int type;
 179                                                 boolean canChange = true; .)
 180   =  [ "final"                               (. canChange = false; .)
 181      ] Type<out type>
 182      VarList<frame, type, canChange>
 183      WEAK ";"
 184   .
 185 
 186   Type<out int type>
 187   =  BasicType<out type>
 188      [ "[]"                                  (. if (type != Types.noType) type++; .)
 189      ]
 190   .
 191 
 192   BasicType<out int type>                    (. type = Types.noType; .)
 193   =   "int"                                  (. type = Types.intType; .)
 194     | "bool"                                 (. type = Types.boolType; .)
 195 	| "char"                                 (. type = Types.charType; .)
 196   .
 197 
 198   VarList<StackFrame frame, int type, boolean canChange>
 199   =  OneVar<frame, type, canChange>
 200      { WEAK "," OneVar<frame, type, canChange> }
 201   .
 202 
 203   OneVar<StackFrame frame, int type, boolean canChange>
 204                                              (. int expType;
 205                                                 Entry var = new Entry(); .)
 206   =  Ident<out var.name>                     (. var.kind = Kinds.Var;
 207                                                 var.type = type;
 208                                                 var.canChange = canChange;
 209                                                 var.offset = frame.size;
 210                                                 frame.size++; .)
 211      (   AssignOp                            (. CodeGen.loadAddress(var); .)
 212          Expression<out expType>             (. if (!assignable(var.type, expType))
 213                                                   SemError("incompatible types in assignment");
 214                                                 CodeGen.assign(var.type); .)
 215        |                                     (. if (!canChange)
 216                                                   SemError("defining expression required"); .)
 217       )                                      (. Table.insert(var); .)
 218   .
 219 
 220 
 221   AssignmentStatement
 222                                              (. int expType;
 223                                                 DesType des; .)
 224   = Designator<out des>                      (. if (des.entry.kind != Kinds.Var)
 225                                                   SemError("cannot assign to " + Kinds.kindNames[des.entry.kind]); 
 226 												if (!des.canChange)
 227                                                   SemError("may not alter this variable"); .)
 228 	AssignOp
 229     Expression<out expType>                  (. if (!assignable(des.type, expType))
 230                                                   SemError("incompatible types in assignment");
 231                                                 CodeGen.assign(des.type); .)
 232     WEAK ";"
 233   .
 234 
 235   Designator<out DesType des>                (. String name;
 236                                                 int indexType; .)
 237   =  Ident<out name>                         (. Entry entry = Table.find(name);
 238                                                 boolean notDeclared = !entry.declared;
 239                                                 if (notDeclared) {
 240                                                   SemError("undeclared identifier");
 241                                                   entry = new Entry(); // new is critical
 242                                                   entry.name = name;   // make an entry anyway
 243                                                   entry.kind = Kinds.Var;
 244                                                   entry.type = Types.noType;
 245                                                   entry.offset = 0;    // unimportant
 246                                                   Table.insert(entry);
 247                                                 } 									  
 248                                                 des = new DesType(entry);
 249                                                 if (entry.kind == Kinds.Var)
 250                                                   CodeGen.loadAddress(entry); .)
 251      [     "["                               (. des.canChange = true;
 252 												if (notDeclared) entry.type++;
 253 												 else if (isArray(des.type)) des.type--;
 254                                                     else SemError("unexpected subscript");
 255                                                 if (des.entry.kind != Kinds.Var)
 256                                                   SemError("unexpected subscript");
 257                                                 CodeGen.dereference(); .)
 258               Expression<out indexType>      (. if (!isArith(indexType))
 259                                                   SemError("invalid subscript type");
 260                                                 CodeGen.index(); .)
 261 
 262            "]"
 263      ]
 264   .
 265 
 266   IfStatement<StackFrame frame>
 267                                              (. Label falseLabel = new Label(!known); .)
 268   =  "if" "(" Condition ")"                  (. CodeGen.branchFalse(falseLabel); .)
 269       [ "then"							 	 (. SemError("then is not used in Parva"); .) 
 270       ]  Statement<frame>                    (. Label exitLabel = new Label(!known); .)
 271                                              (. CodeGen.branch(exitLabel); .)
 272                                              (. falseLabel.here(); .)
 273       [ "else"                               
 274       ] Statement<frame>                     (. exitLabel.here(); .)    
 275   .
 276 
 277   WhileStatement<StackFrame frame>           (. Label loopExit  = new Label(!known);
 278                                                 Label loopStart = new Label(known); .)
 279   =  "while" "(" Condition ")"               (. CodeGen.branchFalse(loopExit); .)
 280      Statement<frame>                        (. CodeGen.branch(loopStart);
 281                                                 loopExit.here(); .)
 282   .
 283 
 284  
 285   HaltStatement
 286   =  "halt"                                  (. CodeGen.leaveProgram(); .)
 287      WEAK ";"
 288   .
 289 
 290   ReadStatement
 291   = "read" "(" ReadList")"
 292     WEAK ";"
 293   .
 294 
 295   ReadList
 296   = ReadElement { WEAK "," ReadElement }
 297   .
 298 
 299   ReadElement                                (. String str;
 300                                                 DesType des; .)
 301   =   StringConst<out str>                   (. CodeGen.writeString(str); .)
 302     | Designator<out des>                    (. if (des.entry.kind != Kinds.Var)
 303                                                   SemError("wrong kind of identifier");
 304 												if (!des.canChange)
 305                                                   SemError("may not alter this variable");
 306                                                 switch (des.type) {
 307                                                   case Types.intType:
 308                                                   case Types.boolType:
 309 												  case Types.charType:
 310                                                     CodeGen.read(des.type); break;
 311                                                   default:
 312                                                     SemError("cannot read this type"); break;
 313                                                 } .)
 314   .
 315 
 316   WriteStatement
 317   =   ( "write" "(" WriteList ")" )
 318     | ( "writeLine" "(" WriteList ")" ) (. CodeGen.writeLine(); .)
 319       WEAK ";"
 320   .
 321 
 322   WriteList
 323   = WriteElement { WEAK "," WriteElement }
 324   .
 325 
 326   WriteElement                               (. int expType;
 327                                                 String str; .)
 328   =   StringConst<out str>                   (. CodeGen.writeString(str); .)
 329     | Expression<out expType>                (. if (!(isArith(expType) || expType == Types.boolType))
 330                                                   SemError("cannot write this type");
 331                                                 switch (expType) {
 332                                                   case Types.intType:
 333                                                   case Types.boolType:
 334 												  case Types.charType:
 335                                                     CodeGen.write(expType); break;
 336                                                   default:
 337                                                     break;
 338                                                 } .)
 339   .
 340 
 341   RepeatStatement<StackFrame frame>           (. Label loopStart = new Label(known); .)
 342   =  "repeat"
 343      { Statement<frame> }
 344      "until"
 345      "(" Condition ")"                        (. CodeGen.branchFalse(loopStart); .)
 346      ";"
 347      .
 348 
 349   DoWhileStatement<StackFrame frame>          (. Label loopExit = new Label(!known); 
 350                                                  Label loopStart = new Label(known); .)
 351   = "do"                        
 352     Statement<frame>
 353     "while"
 354     "(" Condition ")"                         (. CodeGen.branchFalse(loopExit); .)
 355                                               (. CodeGen.branch(loopStart);
 356                                                  loopExit.here(); .)
 357     ";"
 358     .
 359 
 360 
 361   Condition                                  (. int type; .)
 362   =  Expression<out type>                    (. if (!isBool(type))
 363                                                   SemError("boolean expression needed"); .)
 364   .
 365 
 366   Expression<out int type>                   (. int type2;
 367                                                 Label shortcircuit = new Label(!known); .)
 368   =  AndExp<out type>
 369      { "||"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.or); .)
 370        AndExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 371                                                   SemError("Boolean operands needed");
 372                                                 type = Types.boolType; .)
 373      }                                       (. shortcircuit.here(); .)
 374   .
 375 
 376   AndExp<out int type>                       (. int type2;
 377                                                 Label shortcircuit = new Label(!known); .)
 378   =  EqlExp<out type>
 379      { "&&"                                  (. CodeGen.booleanOp(shortcircuit, CodeGen.and); .)
 380        EqlExp<out type2>                     (. if (!isBool(type) || !isBool(type2))
 381                                                   SemError("Boolean operands needed");
 382                                                 type = Types.boolType; .)
 383      }                                       (. shortcircuit.here(); .)
 384   .
 385 
 386   EqlExp<out int type>                       (. int type2;
 387                                                 int op; .)
 388   =  RelExp<out type>
 389      { EqualOp<out op>
 390        RelExp<out type2>                     (. if (!compatible(type, type2))
 391                                                   SemError("incomparable operand types");
 392                                                 CodeGen.comparison(op, type);
 393                                                 type = Types.boolType; .)
 394      }
 395   .
 396 
 397   RelExp<out int type>                       (. int type2;
 398                                                 int op; .)
 399   =  AddExp<out type>
 400      [ RelOp<out op>
 401        AddExp<out type2>                     (. if (!isArith(type) || !isArith(type2))
 402                                                   SemError("incomparable operand types");
 403                                                 CodeGen.comparison(op, type);
 404                                                 type = Types.boolType; .)
 405      ]
 406   .
 407 
 408   AddExp<out int type>                       (. int type2;
 409                                                 int op; .)
 410   =  MultExp<out type>
 411      { AddOp<out op>
 412        MultExp<out type2>                    (. if (!isArith(type) || !isArith(type2)) {
 413                                                   SemError("arithmetic operands needed");
 414                                                   type = Types.noType;
 415                                                 }
 416                                                 else type = Types.intType;
 417                                                 CodeGen.binaryOp(op); .)
 418      }
 419   .
 420 
 421   MultExp<out int type>                      (. int type2;
 422                                                 int op; .)
 423   =  Factor<out type>
 424      { MulOp<out op>
 425        Factor<out type2>                     (. if (!isArith(type) || !isArith(type2)) {
 426                                                   SemError("arithmetic operands needed");
 427                                                   type = Types.noType;
 428                                                 }
 429                                                 else type = Types.intType;
 430                                                 CodeGen.binaryOp(op); .)
 431      }
 432   .
 433 
 434   Factor<out int type>                       (. type = Types.noType; .)
 435   =    Primary<out type>
 436      | "+" Factor<out type>                  (. if (!isArith(type)) {
 437                                                   SemError("arithmetic operand needed");
 438                                                   type = Types.noType;
 439                                                 }
 440                                                 else type = Types.intType; .)
 441      | "-" Factor<out type>                  (. if (!isArith(type)) {
 442                                                   SemError("arithmetic operand needed");
 443                                                   type = Types.noType;
 444                                                 }
 445                                                 else type = Types.intType;
 446                                                 CodeGen.negateInteger(); .)
 447      | "!" Factor<out type>                  (. if (!isBool(type))
 448                                                   SemError("Boolean operand needed");
 449                                                 type = Types.boolType;
 450                                                 CodeGen.negateBoolean(); .)
 451   .
 452 
 453   Primary<out int type>                      (. type = Types.noType;
 454                                                 int size;
 455                                                 DesType des;
 456                                                 ConstRec con; .)
 457   =    Designator<out des>                   (. type = des.type;
 458                                                 switch (des.entry.kind) {
 459                                                   case Kinds.Var:
 460                                                     CodeGen.dereference();
 461                                                     break;
 462                                                   case Kinds.Con:
 463                                                     CodeGen.loadConstant(des.entry.value);
 464                                                     break;
 465                                                   default:
 466                                                     SemError("wrong kind of identifier");
 467                                                     break;
 468                                                 } .)
 469      | Constant<out con>                     (. type = con.type;
 470                                                 CodeGen.loadConstant(con.value); .)
 471      | "new"
 472        (   BasicType<out type>
 473            "[" Expression<out size>          (. if (!isArith(size))
 474                                                   SemError("array size must be integer");
 475                                                 type++; .)
 476            "]"
 477        )                                     (. CodeGen.allocate(); .)
 478 
 479      | "(" Expression<out type> ")"
 480   .
 481 
 482   AddOp<out int op>                          (. op = CodeGen.nop; .)
 483   =    "+"                                   (. op = CodeGen.add; .)
 484      | "-"                                   (. op = CodeGen.sub; .)
 485   .
 486 
 487   MulOp<out int op>                          (. op = CodeGen.nop; .)
 488   =    "*"                                   (. op = CodeGen.mul; .)
 489      | "/"                                   (. op = CodeGen.div; .)
 490      | "%"                                   (. op = CodeGen.rem; .)
 491   .
 492 
 493   EqualOp<out int op>                        (. op = CodeGen.nop; .)
 494   =    "=="                                  (. op = CodeGen.ceq; .)
 495      | "!="                                  (. op = CodeGen.cne; .)
 496      | "="                                   (. SemError("== intended?"); .)
 497      | "<>"                                  (. SemError("!= intended?"); .)
 498   .
 499 
 500   RelOp<out int op>                          (. op = CodeGen.nop; .)
 501   =    "<"                                   (. op = CodeGen.clt; .)
 502      | "<="                                  (. op = CodeGen.cle; .)
 503      | ">"                                   (. op = CodeGen.cgt; .)
 504      | ">="                                  (. op = CodeGen.cge; .)
 505   .
 506 
 507   AssignOp 
 508   =     "=" 
 509 	  | ":=" 								 (. SemError("= intended?"); .) 
 510   .
 511 
 512   Ident<out String name>
 513   =  identifier                              (. name = token.val; .)
 514   .
 515 
 516   StringConst<out String str>                (. String str2; .)
 517   = OneString<out str>
 518     { [ "+" ] OneString<out str2>            (. str = str + str2; .)
 519     } .
 520 
 521   OneString<out String str>
 522   =  stringLit                               (. str = token.val;
 523                                                 str = unescape(str.substring(1, str.length() - 1)); .)
 524   .
 525 
 526   CharConst<out int value>
 527   =  charLit                                 (. String str = token.val;
 528                                                 str = unescape(str.substring(1, str.length() - 1));
 529                                                 value = str.charAt(0); .)
 530   .
 531 
 532   IntConst<out int value>
 533   =  number                                  (. try {
 534                                                   value = Integer.parseInt(token.val);
 535                                                 } catch (NumberFormatException e) {
 536                                                   value = 0; SemError("number out of range");
 537                                                 } .)
 538   .
 539 
 540 END Parva.
 541 

0 errors detected
